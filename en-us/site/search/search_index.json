{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Overview \u00b6 We deliver a complete solution to improve business productivity, ensure business process and security compliance, intelligently store content and retrieve information quickly. The platform allows you to perform the necessary migrations or integrations between systems to further increase your experience, digital transformation and the guarantee of positive results. The documentation is divided as follows: Overview Configuring Acess Load Operations Register Operation APIs 4biz Webservice (Export Data, Docs, 4biz and Builder) Follow the menu on the side to access the documentation.","title":"Overview"},{"location":"index.html#overview","text":"We deliver a complete solution to improve business productivity, ensure business process and security compliance, intelligently store content and retrieve information quickly. The platform allows you to perform the necessary migrations or integrations between systems to further increase your experience, digital transformation and the guarantee of positive results. The documentation is divided as follows: Overview Configuring Acess Load Operations Register Operation APIs 4biz Webservice (Export Data, Docs, 4biz and Builder) Follow the menu on the side to access the documentation.","title":"Overview"},{"location":"api/apis.html","text":"API\u00b4s 4biz Platform \u00b6 This section is intended to describe the communication structure REST, established between applications and the back-end server. Warning \" 4biz_URL \": URL unalterable prefix, so that you can access the services made available to the mobile applications. ALL API THAT REQUIRES A \u201c sessionID \u201d WILL NEED TO BE IN A SESSION PROVIDED BY THE \u201cLogin\u201d API. Login \u00b6 Login the user to use 4biz Services. Method POST URL < 4biz_URL > /services/v2/login Request Request { \"userName\" : \"mobile\" , \"password\" : \"123456\" , \"token\" : \"API132654ASFE32132121\u00c2\u00ad5412\" , \"platform\" : \"android\" } Response Response { \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" , \"rangeAction\" : 10 , \"locationInterval\" : 10 } Fields Request: userName: alphanumeric not empty and not null; password: alphanumeric not empty and not null; token: alphanumeric not empty and not null, referring to the device identifier for sending the push notification; platform: referring to the platform type (ios or android) from which the user will log in; Response: sessionID: cannot be null or empty. rangeAction: is integer, not null and can be zero. It represents the action radius of a field user in KM. locationInterval: is integer, not null, and greater than zero. Represents, in minutes, the time interval that the App must send the positioning of the attendant. ListContracts \u00b6 List the contracts accessible to the attendant. Method POST URL < 4biz_URL > /services/v2/contracts Request { \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" } Response { \"dateTime\" : 1412101947000 , \"operationID\" : 65 , \"error\" : null , \"contracts\" : [ { \"id\" : 1 , \"description\" : \"Test Name\" } ] } Fields Request : sessionID: alphanumeric not null and not empty; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; contracts: not empty and not null; id: numeric not empty and not null; description: alphanumeric not empty and not null ListDeniedReasons \u00b6 List the reasons when refusing a request, like in the check-in. Method POST URL < 4biz_URL > /services/v2/deniedReasons Request { \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" } Response { \"dateTime\" : 1412101988000 , \"operationID\" : 666 , \"error\" : null , \"reasons\" : [ { \"id\" : 1 , \"description\" : \"First Suspension Reason\" }, { \"id\" : 2 , \"description\" : \"Second Suspension Reason\" } ] } Fields Request : sessionID: alphanumeric not null and not empty; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; reasons: not empty and not null; id: numeric not empty and not null; description: alphanumeric not empty and not null; ListSolicitationStatus \u00b6 List status of a request to be used, for example, in the checkout service. Method POST URL < 4biz_URL > /services/v2/status Request { \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" } Response { \"dateTime\" : 1412101662000 , \"operationID\" : 64 , \"error\" : null , \"status\" : [ { \"id\" : 1 , \"description\" : \"In progress\" }, { \"id\" : 2 , \"description\" : \"Suspended\" , \"justifications\" : [ { \"id\" : 1 , \"description\" : \"First Suspension Reason\" }, { \"id\" : 2 , \"description\" : \"Second Suspension Reason\" } ] }, { \"id\" : 3 , \"description\" : \"Canceled\" }, { \"id\" : 4 , \"description\" : \"Solved\" , \"justifications\" : [ { \"id\" : 1 , \"description\" : \"Reconfigured database user\" , \"parentId\" : null }, { \"id\" : 2 , \"description\" : \"Any other solution here\" , \"parentId\" : 1 } ] } ] } Fields Request : sessionID: alphanumeric not null and not empty; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; status: not empty and not null; id: numeric not empty and not null; description: alphanumeric not empty and not null; ListUnits \u00b6 List the units of a contract Method POST URL < 4biz_URL > /services/v2/units Request { \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" \"contractID\" : 1233 } Response { \"dateTime\" : 1412101988000 , \"operationID\" : 66 , \"error\" : null , \"units\" : [ { \"id\" : 1 , \"description\" : \"Default\" }, { \"id\" : 2 , \"description\" : \"Unit Test\" } ] } Fields Request : sessionID: alphanumeric not null and not empty; contractID: numeric not null Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; units: not empty and not null; id: numeric not empty and not null; description: alphanumeric not empty and not null; SendCoordinates \u00b6 Update the geographical coordinates of a unit. Method POST URL < 4biz_URL > /services/v2/coordinates Request { \"unitID\" : 222 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" , \"latitude\" : -19.369852147 , \"longitude\" : -49.369852147 } Response { \"dateTime\" : 1412102841000 , \"operationID\" : 68 , \"error\" : null , \"success\" : true } Fields Request : unitID: numeric not null; sessionID: alphanumeric not empty and not null; latitude: numeric not null; longitude: numeric not null; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; success: boolean; DeviceDisassociate \u00b6 Disassociate a user from a device, so that when a user deletes a connection, the user no longer receives push notification from the deleted connection. Method POST URL < 4biz_URL > /services/v2/disassociate Request { \"connection\" : \"http://4biz.example.com.br&quot;, \" sessionID \": \" 2355 A 68 BF 75281 B 73607 EEC 1 A 7191645 \", \" token \": \" API 132654 ASFE 32132121 \u00ac 5412 \" } Response { \"dateTime\" : 1412102841000 , \"operationID\" : 68 , \"error\" : null , \"success\" : true } Fields Request : connection: alphanumeric not empty and not null, referring to the connection deleted by the user; sessionID: alphanumeric not empty and not null; token: alphanumeric not empty and not null, referring to the token to be disassociated; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; success: boolean; GetNewest \u00b6 Recover the most recent request for the user in the group, from the latest (newestNumber) in the App Method POST URL < 4biz_URL > /services/v2/getNewest Request { \"notificationType\" : 0 , \"onlyApproval\" : 1 , \"newestNumber\" : 322 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" } Response { \"dateTime\" : 1377618318000 , \"operationID\" : 336 , \"error\" : null , \"notifications\" : [ { \"number\" : 95933 , \"taskId\" : 22737 , \"type\" : 1 , \"date\" : \"27/08/2013\" , \"timeFlag\" : 12345 , \"timeSLA\" : 12 , \"latitude\" : 32.9984730 , \"longitude\" : 29.9984730 , \"endSLA\" : \"null\" , \"task\" : \"Validar requisi\u00e7\u00e3o\" , \"personal\" : true , \"inService\" : true , \"inCkeckin\" : 0 , \"typeRequest\" : 0 , \"waiting\" : 1 , \"service\" : \"SERVICES AND PRODUCTS REQUEST\" , \"contract\" : 1 , \"unit\" : 15 , \"priorityorder\" : 1 } ] } Fields Request : notificationType: numeric not null; onlyApproval: numeric not null; sessionID: alphanumeric not null and not empty; newestNumber: numeric not null; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; notifications: not null; number: numeric not null; taskId: numeric not null; type: numeric not empty and not null; 0 - All 1 - Purchases 2 - Travels 3 - HR 4 - Incidents 5 - Others 6 - Waiting date: date string in dd/mm/yyyy format; timeFlag: Number that defines the period; 0 - In time 1 - Less than an hour 2 - Overdue timeSLA: numeric integer not null, in minutes; latitude: numeric; longitude: numeric; endSLA: date in alphanumeric in the patterns dd/MM/ yyyy HH:mm or MM/dd/yyyy HH:mm, depending on the locale, which may have null value. task: alphanumeric not empty and not null; personal: boolean that identifies whether the request is signed for the user or if it's from the group; inService: non-null boolean that identifies whether the request is in attendance; inCheckin: Flag that identifies whether a request is in Personal check (true or false); 0 \u2013 Waiting checkin 1 \u2013 In Cleckin service: alphanumeric not empty and not null; typeRequest: Flag that identifies the execution type of a request 0 - Request Execution 1 - Request Approval waiting: Flag that defines the status of the request. 0 - Monitoring 1 - Execution available contract: numeric not null; unit: numeric not null; priorityorder: numeric value that can present null value, sequence number that identifies if the manager ordered the attendance; GetOldest \u00b6 Recover the most recent request for the user in the group, from the oldest. Method POST URL < 4biz_URL > /services/v2/getOldest Request { \"notificationType\" : 0 , \"onlyApproval\" : 1 , \"oldestNumber\" : 322 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" } Response { \"dateTime\" : 1377618318000 , \"operationID\" : 336 , \"error\" : null , \"notifications\" : [ { \"number\" : 95933 , \"taskId\" : 22737 , \"type\" : 1 , \"date\" : \"27/08/2013\" , \"timeFlag\" : 12345 , \"timeSLA\" : 12 , \"latitude\" : 32.9984730 , \"longitude\" : 29.9984730 , \"endSLA\" : \"null\" , \"task\" : \"Validate request\" , \"personal\" : true , \"inService\" : true , \"inCheckin\" : 1 , \"typeRequest\" : 0 , \"waiting\" : 1 \"service\" : \"SERVICES AND PRODUCTS REQUEST\" , \"contract\" : 1 , \"unit\" : 15 , \"priorityorder\" : 1 } ] } Fields Request : notificationType: numeric not null; onlyApproval: numeric not null; sessionID: alphanumeric not null and not empty; oldestNumber: numeric not null; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; notifications: not null; number: numeric not null; taskId: numeric not null; type: numeric not empty and not null; 0 - All 1 - Purchases 2 - Travels 3 - HR 4 - Incidents 5 - Others 6 - Waiting date: date string in the format dd/mm/yyyy; timeFlag: Number that defines the period; 0 - In time 1 - Less than an hour 2 - Overdue timeSLA: numeric integer not null, in minutes; latitude: numeric; longitude: numeric; endSLA: date in alphanumeric in the patterns dd/MM/ yyyy HH:mm or MM/dd/yyyy HH:mm, depending on the locale, which may have null value. task: alphanumeric not empty and not null; personal: boolean that identifies whether the request is signed for the user or if it's from the group; inService: non-null boolean that identifies whether the request is in service; inCheckin: Flag that identifies whether a request is in the checkin Personal (true or false); 0 \u2013 Waiting checkin 1 \u2013 In Cleckin service: alphanumeric not empty and not null; typeRequest: Flag that identifies the type of execution of a request 0 - Request Execution 1 - Request Approval waiting: Flag that defines the status of the request 0 - Monitoring 1 - Execution available contract: numeric not null; unit: numeric not null; priorityorder: numeric value that can present null value, sequence number that identifies if the manager ordered the service; GetByCoordinates \u00b6 Recover the most recent request for the user in the group, from the user's current coordinates. Method POST URL < 4biz_URL > /services/v2/getByCoordinates Request { \"notificationType\" : 0 , \"onlyApproval\" : 1 , \"latitude\" : 32.9984730 , \"longitude\" : 29.9984730 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" , \"pager\" : { \"page\" : 1 , \"size\" : 10 } Response { \"dateTime\" : 1377618318000 , \"operationID\" : 336 , \"error\" : null , \"notifications\" : [ { \"number\" : 95933 , \"taskId\" : 22737 , \"type\" : 1 , \"date\" : \"27/08/2013\" , \"timeFlag\" : 12345 , \"timeSLA\" : 12 , \"latitude\" : 32.9984730 , \"longitude\" : 29.9984730 , \"endSLA\" : \"null\" , \"task\" : \"Validate request\" , \"typeRequest\" : 0 , \"waiting\" : 1 \"personal\" : true , \"inService\" : true , \"inCheckin\" : 1 , \"service\" : \"SERVICES AND PRODUCTS REQUEST\" , \"contract\" : 1 , \"unit\" : 15 , \"priorityorder\" : 1 } ], \"paging\" : { \"page\" : 1 , \"size\" : 1 , \"totalElements\" : 5 , \"totalPages\" : 5 } } Fields Request : notificationType: numeric not null; onlyApproval: numeric not null; latitude: numeric not null; longitude: numeric not null; sessionID: alphanumeric not null and not empty; pager: pagination information: page: page number to be queried, starting from 1; size: number of elements to return; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; notifications: not null; number: numeric not null; taskId: numeric not null; type: numeric not empty and not null; 0 - All 1 - Purchases 2 - Travels 3 - HR 4 - Incidents 5 - Others 6 - Waiting date: date string in the format dd/mm/yyyy; timeFlag: Number that defines the period; 0 - In time 1 - Less than an hour 2 - Overdue timeSLA: numeric integer not null, in minutes; latitude: numeric not null; longitude: numeric not null; endSLA: date in alphanumeric in the patterns dd/MM/ yyyy HH:mm or MM/dd/yyyy HH:mm, depending on the locale, which may have null value. task: alphanumeric not empty and not null; personal: boolean that identifies whether the request is signed for the user or if it's from the group; inService: non-null boolean that identifies whether the request is in service; inCheckin: Flag that identifies whether a request is in the checkin Personal (true or false); 0 \u2013 Waiting checkin 1 \u2013 In Cleckin service: alphanumeric not empty and not null; typeRequest: Flag that identifies the type of execution of a request 0 - Request Execution 1 - Request Approval waiting: Flag that defines the status of the request. 0 - Monitoring 1 - Execution available contract: numeric not null; unit: numeric not null; priorityorder: numeric value that can present null value, sequence number that identifies if the manager ordered the service; paging: pagination information 1. page: number of the current page 2. size: size of the page returned 3. totalElements: total of elements according to the query totalPages: total of pages according to the query UpdateNotification \u00b6 Retrieve the tasks of a service. Method POST URL < 4biz_URL > /services/v2/update Request { number \": 322, \" sessionID \": \" 2355 A 68 BF 75281 B 73607 EEC 1 A 7191645 \" } Response { \"dateTime\" : 1377618318000 , \"operationID\" : 336 , \"error\" : null , \"notifications\" : [ { \"number\" : 95933 , \"taskId\" : 22737 , \"type\" : 1 , \"date\" : \"27/08/2013\" , \"timeFlag\" : 12345 , \"timeSLA\" : 12 , \"latitude\" : 32.9984730 , \"longitude\" : 29.9984730 , \"endSLA\" : \"null\" , \"task\" : \"Validate request\" , \"personal\" : true , \"inService\" : true , \"inCheckin\" : 1 , \"typeRequest\" : 0 , \"waiting\" : 1 \"service: \" SERVICES AND PRODUCTS REQUEST \", \" contract \": 1, \" unit \": 15, \" priorityorder\" : 1 } ] } Fields Request : notificationType: numeric not null; onlyApproval: numeric not null; sessionID: alphanumeric not null and not empty; oldestNumber: numeric not null; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; notifications: not null; number: numeric not null; taskId: numeric not null; type: numeric not empty and not null; 0 - All 1 - Purchases 2 - Travels 3 - HR 4 - Incidents 5 - Others 6 - Waiting date: date string in format dd/mm/yyyy; timeFlag: Number that defines the period; 0 - In time 1 - Less than an hour 2 - Overdue timeSLA: numeric integer not null, in minutes; latitude: numeric; longitude: numeric; endSLA: date in alphanumeric in the patterns dd/MM/ yyyy HH:mm or MM/dd/yyyy HH:mm, depending on the locale, which may have null value. task: alphanumeric not empty and not null; personal: boolean that identifies whether the request is signed for the user or if it's from the group; inService: non-null boolean that identifies whether the request is in service; inCheckin: Flag that identifies whether a request is in the checkin Personal (true or false); 0 \u2013 Waiting checkin 1 \u2013 In Cleckin service: alphanumeric not empty and not null; typeRequest: Flag that identifies the type of execution of a request 0 - Request Execution 1 - Request Approval waiting: Flag that defines the status of the request. 0 - Monitoring 1 - Execution available contract: numeric not null; unit: numeric not null; priorityorder: numeric value that can present null value, sequence number that identifies if the manager ordered the service; GetById \u00b6 Retrieves details of a request, according to its identifier Method POST URL < 4biz_URL > /services/v2/getById Request { \"taskId\" : 22737 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" } Response { \"dateTime\" : 1377618392000 , \"operationID\" : 337 , \"error\" : null , \"notification\" : { \"endSLA\" : \"null\" , \"task\" : \"Validate request\" , \"service\" : \"SERVICES AND PRODUCTS REQUEST\" , \"description\" : \" test\" , \"status\" : \"In progress\" , \"taskStatus\" : \"Available\" , \"timeSLA\" : 12 } } Fields Request : taskId: numeric not null; sessionID: alphanumeric not null and not empty; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; notification; not empty and not null; endSLA: date in alphanumeric by the patterns dd/MM/yyyy HH:mm or MM/dd/yyyy HH:mm, depending on the locale. task: alphanumeric not empty and not null; service: alphanumeric not empty and not null; description: alphanumeric not empty and not null; status: alphanumeric not empty and not null; taskStatus: alphanumeric not empty and not null; timeSLA: numeric integer not null, in minutes; GetReasons \u00b6 Recover motives to be used in the approval of a request, according to the request. Method POST URL < 4biz_URL > /services/v2/getReasons Request { \"taskId\" : 22737 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" } Response { \"dateTime\" : 1377618482000 , \"operationID\" : 339 , \"error\" : null , \"amount\" : 4 , \"reasons\" : [ { \"id\" : 1 , \"desc\" : \"Non-refundable authorization\" }, { \"id\" : 4 , \"desc\" : \"Purchase necessary to the business\" }, { \"id\" : 6 , \"desc\" : \"Purchase need supplied with another solution\" }, { \"id\" : 5 , \"desc\" : \"Value of quotation above the budget of the contract\" } ] } Fields Request : taskId: numeric not null; sessionID: alphanumeric not null and not empty; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; amount: numeric not empty and not null; reasons; not empty and not null; id: numeric not empty and not null; desc: alphanumeric not empty and not null; AttendRequest \u00b6 Inform the beginning of attendance of a service request Method POST URL < 4biz_URL > /services/v2/attendRequest Request { \"number\" : 89647 , \"latitude\" : -19.369852147 , \"longitude\" : -49.369852147 , \"dateTime\" : 1377618517000 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" } Response { \"dateTime\" : 1377618517000 , \"operationID\" : 341 , \"error\" : null , \"success\" : true } Fields Request : number: numeric not null; latitude: numeric not null; longitude: numeric not null; dateTime: timestamp not empty and not null; sessionID: alphanumeric not null and not empty; Response : dateTime: timestamp not empty and not nul; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; success: boolean that identifies the successful completion of the operation; AttendantLocation \u00b6 Reports the automatic location of the attendant position. Method POST URL < 4biz_URL > /services/v2/ location Request { \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" , \"latitude\" : -19.369852147 , \"longitude\" : -49.369852147 , \"dateTime\" : 1412102841000 } Response { \"dateTime\" : 1412102841000 , \"operationID\" : 68 , \"error\" : null , \"success\" : true } Fields N/A Feedback \u00b6 Register an approval or denial of a service request. Method POST URL < 4biz_URL > /services/v2/feedback Request { \"taskId\" : 22736 , \"feedback\" : 0 , \"reasonId\" : 1 , \"comments\" : \"Comments\" , \"sessionID\" : \" 2355 A 68 BF 75281 B 73607 EEC 1 A 7191645 } Response { \"dateTime\" : 1377618517000 , \"operationID\" : 341 , \"error\" : null } Fields Request : taskId: numeric not null; feedback: numeric not null: 0 - request rejection; 1 - request approval; reasonId: numeric not null; comments: alphanumeric not null and not empty; sessionID: alphanumeric not null and not empty; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; New \u00b6 Create a new request. Method POST URL < 4biz_URL > /services/v2/new Request { \"description\" : \"Teste mobile\" , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" , \"latitude\" : -19.369852147 , \"longitude\" : -49.369852147 } Response { \"dateTime\" : 1377618543000 , \"operationID\" : 342 , \"error\" : null , \"number\" : 95935 } Fields Request : description: alphanumeric not null and not empty; sessionID: alphanumeric not null and not empty; latitude: numeric not null; longitude: numeric not null; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; number: alphanumeric not empty and not null; Check-In \u00b6 Check-in of the attendant in a request. In other words, it initiates the fulfillment of the request. Method POST URL < 4biz_URL > /services/v2/checkin Request { \"taskId\" : 22778 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" , \"latitude\" : -19.369852147 , \"longitude\" : -49.369852147 , \"startTime\" : 1377618543000 } Response { \"dateTime\" : 1377618543000 , \"operationID\" : 342 , \"error\" : null , \"number\" : 95935 } Fields Request : taskId: numeric not null; sessionID: alphanumeric not null and not empty; latitude: numeric not null; longitude: numeric not null; startTime: timestamp not empty and not null of the time that the attendant requests \"Check-in\" Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; number: alphanumeric not empty and not null; Check-Out \u00b6 Checks out an attendant in a request, updating their status (\"Suspended\", \"Solved\", etc.). Method POST URL < 4biz_URL > /services/v2/checkout Request { \"taskId\" : 22778 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" , \"latitude\" : -19.369852147 , \"longitude\" : -49.369852147 , \"status\" : 5 , \"solution\" : 5 , \"descSolution\" : \"Descri\u00e7\u00e3o da Solu\u00e7\u00e3o\" } Response { \"dateTime\" : 1377618517000 , \"operationID\" : 342 , \"error\" : null , \"number\" : 95935 } Fields Request : taskId: numeric not null; sessionID: alphanumeric not null and not empty; latitude: numeric not null; longitude: numeric not null; status: numeric not null, according to return of service \"ListNotivicationStatus\" solution: numeric, informed only when a status of \"Solved (4)\" or \"Suspended (2)\" descSolution: alphanumeric, non-null and non-empty, reported only when status equal to \"Solved (4)\" or \"Suspended (2)\" Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; number: alphanumeric not empty and not null; Check-InDenied \u00b6 Register the denial of a request attendance by the attendant, in cases of refusal to the check-in. Method POST URL < 4biz_URL > /services/v2/denied Request { \"taskId\" : 22778 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" , \"latitude\" : -19.369852147 , \"longitude\" : -49.369852147 , \"dateTime\" : 1377618543000 , \"reasonId\" : 1377618543000 } Response { \"dateTime\" : 1377618543000 , \"operationID\" : 342 , \"error\" : null } Fields Request : taskId: numeric not null; sessionID: alphanumeric not empty and not null; latitude: numeric not null; longitude: numeric not null; reasonId: numeric and not null. Obtained by calling the \"GetDeniedReasons\" service; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; number: alphanumeric not empty and not null;","title":"API\u00b4s 4biz"},{"location":"api/apis.html#api-s-4biz-platform","text":"This section is intended to describe the communication structure REST, established between applications and the back-end server. Warning \" 4biz_URL \": URL unalterable prefix, so that you can access the services made available to the mobile applications. ALL API THAT REQUIRES A \u201c sessionID \u201d WILL NEED TO BE IN A SESSION PROVIDED BY THE \u201cLogin\u201d API.","title":"API\u00b4s 4biz Platform"},{"location":"api/apis.html#login","text":"Login the user to use 4biz Services. Method POST URL < 4biz_URL > /services/v2/login Request Request { \"userName\" : \"mobile\" , \"password\" : \"123456\" , \"token\" : \"API132654ASFE32132121\u00c2\u00ad5412\" , \"platform\" : \"android\" } Response Response { \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" , \"rangeAction\" : 10 , \"locationInterval\" : 10 } Fields Request: userName: alphanumeric not empty and not null; password: alphanumeric not empty and not null; token: alphanumeric not empty and not null, referring to the device identifier for sending the push notification; platform: referring to the platform type (ios or android) from which the user will log in; Response: sessionID: cannot be null or empty. rangeAction: is integer, not null and can be zero. It represents the action radius of a field user in KM. locationInterval: is integer, not null, and greater than zero. Represents, in minutes, the time interval that the App must send the positioning of the attendant.","title":"Login"},{"location":"api/apis.html#listcontracts","text":"List the contracts accessible to the attendant. Method POST URL < 4biz_URL > /services/v2/contracts Request { \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" } Response { \"dateTime\" : 1412101947000 , \"operationID\" : 65 , \"error\" : null , \"contracts\" : [ { \"id\" : 1 , \"description\" : \"Test Name\" } ] } Fields Request : sessionID: alphanumeric not null and not empty; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; contracts: not empty and not null; id: numeric not empty and not null; description: alphanumeric not empty and not null","title":"ListContracts"},{"location":"api/apis.html#listdeniedreasons","text":"List the reasons when refusing a request, like in the check-in. Method POST URL < 4biz_URL > /services/v2/deniedReasons Request { \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" } Response { \"dateTime\" : 1412101988000 , \"operationID\" : 666 , \"error\" : null , \"reasons\" : [ { \"id\" : 1 , \"description\" : \"First Suspension Reason\" }, { \"id\" : 2 , \"description\" : \"Second Suspension Reason\" } ] } Fields Request : sessionID: alphanumeric not null and not empty; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; reasons: not empty and not null; id: numeric not empty and not null; description: alphanumeric not empty and not null;","title":"ListDeniedReasons"},{"location":"api/apis.html#listsolicitationstatus","text":"List status of a request to be used, for example, in the checkout service. Method POST URL < 4biz_URL > /services/v2/status Request { \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" } Response { \"dateTime\" : 1412101662000 , \"operationID\" : 64 , \"error\" : null , \"status\" : [ { \"id\" : 1 , \"description\" : \"In progress\" }, { \"id\" : 2 , \"description\" : \"Suspended\" , \"justifications\" : [ { \"id\" : 1 , \"description\" : \"First Suspension Reason\" }, { \"id\" : 2 , \"description\" : \"Second Suspension Reason\" } ] }, { \"id\" : 3 , \"description\" : \"Canceled\" }, { \"id\" : 4 , \"description\" : \"Solved\" , \"justifications\" : [ { \"id\" : 1 , \"description\" : \"Reconfigured database user\" , \"parentId\" : null }, { \"id\" : 2 , \"description\" : \"Any other solution here\" , \"parentId\" : 1 } ] } ] } Fields Request : sessionID: alphanumeric not null and not empty; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; status: not empty and not null; id: numeric not empty and not null; description: alphanumeric not empty and not null;","title":"ListSolicitationStatus"},{"location":"api/apis.html#listunits","text":"List the units of a contract Method POST URL < 4biz_URL > /services/v2/units Request { \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" \"contractID\" : 1233 } Response { \"dateTime\" : 1412101988000 , \"operationID\" : 66 , \"error\" : null , \"units\" : [ { \"id\" : 1 , \"description\" : \"Default\" }, { \"id\" : 2 , \"description\" : \"Unit Test\" } ] } Fields Request : sessionID: alphanumeric not null and not empty; contractID: numeric not null Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; units: not empty and not null; id: numeric not empty and not null; description: alphanumeric not empty and not null;","title":"ListUnits"},{"location":"api/apis.html#sendcoordinates","text":"Update the geographical coordinates of a unit. Method POST URL < 4biz_URL > /services/v2/coordinates Request { \"unitID\" : 222 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" , \"latitude\" : -19.369852147 , \"longitude\" : -49.369852147 } Response { \"dateTime\" : 1412102841000 , \"operationID\" : 68 , \"error\" : null , \"success\" : true } Fields Request : unitID: numeric not null; sessionID: alphanumeric not empty and not null; latitude: numeric not null; longitude: numeric not null; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; success: boolean;","title":"SendCoordinates"},{"location":"api/apis.html#devicedisassociate","text":"Disassociate a user from a device, so that when a user deletes a connection, the user no longer receives push notification from the deleted connection. Method POST URL < 4biz_URL > /services/v2/disassociate Request { \"connection\" : \"http://4biz.example.com.br&quot;, \" sessionID \": \" 2355 A 68 BF 75281 B 73607 EEC 1 A 7191645 \", \" token \": \" API 132654 ASFE 32132121 \u00ac 5412 \" } Response { \"dateTime\" : 1412102841000 , \"operationID\" : 68 , \"error\" : null , \"success\" : true } Fields Request : connection: alphanumeric not empty and not null, referring to the connection deleted by the user; sessionID: alphanumeric not empty and not null; token: alphanumeric not empty and not null, referring to the token to be disassociated; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; success: boolean;","title":"DeviceDisassociate"},{"location":"api/apis.html#getnewest","text":"Recover the most recent request for the user in the group, from the latest (newestNumber) in the App Method POST URL < 4biz_URL > /services/v2/getNewest Request { \"notificationType\" : 0 , \"onlyApproval\" : 1 , \"newestNumber\" : 322 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" } Response { \"dateTime\" : 1377618318000 , \"operationID\" : 336 , \"error\" : null , \"notifications\" : [ { \"number\" : 95933 , \"taskId\" : 22737 , \"type\" : 1 , \"date\" : \"27/08/2013\" , \"timeFlag\" : 12345 , \"timeSLA\" : 12 , \"latitude\" : 32.9984730 , \"longitude\" : 29.9984730 , \"endSLA\" : \"null\" , \"task\" : \"Validar requisi\u00e7\u00e3o\" , \"personal\" : true , \"inService\" : true , \"inCkeckin\" : 0 , \"typeRequest\" : 0 , \"waiting\" : 1 , \"service\" : \"SERVICES AND PRODUCTS REQUEST\" , \"contract\" : 1 , \"unit\" : 15 , \"priorityorder\" : 1 } ] } Fields Request : notificationType: numeric not null; onlyApproval: numeric not null; sessionID: alphanumeric not null and not empty; newestNumber: numeric not null; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; notifications: not null; number: numeric not null; taskId: numeric not null; type: numeric not empty and not null; 0 - All 1 - Purchases 2 - Travels 3 - HR 4 - Incidents 5 - Others 6 - Waiting date: date string in dd/mm/yyyy format; timeFlag: Number that defines the period; 0 - In time 1 - Less than an hour 2 - Overdue timeSLA: numeric integer not null, in minutes; latitude: numeric; longitude: numeric; endSLA: date in alphanumeric in the patterns dd/MM/ yyyy HH:mm or MM/dd/yyyy HH:mm, depending on the locale, which may have null value. task: alphanumeric not empty and not null; personal: boolean that identifies whether the request is signed for the user or if it's from the group; inService: non-null boolean that identifies whether the request is in attendance; inCheckin: Flag that identifies whether a request is in Personal check (true or false); 0 \u2013 Waiting checkin 1 \u2013 In Cleckin service: alphanumeric not empty and not null; typeRequest: Flag that identifies the execution type of a request 0 - Request Execution 1 - Request Approval waiting: Flag that defines the status of the request. 0 - Monitoring 1 - Execution available contract: numeric not null; unit: numeric not null; priorityorder: numeric value that can present null value, sequence number that identifies if the manager ordered the attendance;","title":"GetNewest"},{"location":"api/apis.html#getoldest","text":"Recover the most recent request for the user in the group, from the oldest. Method POST URL < 4biz_URL > /services/v2/getOldest Request { \"notificationType\" : 0 , \"onlyApproval\" : 1 , \"oldestNumber\" : 322 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" } Response { \"dateTime\" : 1377618318000 , \"operationID\" : 336 , \"error\" : null , \"notifications\" : [ { \"number\" : 95933 , \"taskId\" : 22737 , \"type\" : 1 , \"date\" : \"27/08/2013\" , \"timeFlag\" : 12345 , \"timeSLA\" : 12 , \"latitude\" : 32.9984730 , \"longitude\" : 29.9984730 , \"endSLA\" : \"null\" , \"task\" : \"Validate request\" , \"personal\" : true , \"inService\" : true , \"inCheckin\" : 1 , \"typeRequest\" : 0 , \"waiting\" : 1 \"service\" : \"SERVICES AND PRODUCTS REQUEST\" , \"contract\" : 1 , \"unit\" : 15 , \"priorityorder\" : 1 } ] } Fields Request : notificationType: numeric not null; onlyApproval: numeric not null; sessionID: alphanumeric not null and not empty; oldestNumber: numeric not null; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; notifications: not null; number: numeric not null; taskId: numeric not null; type: numeric not empty and not null; 0 - All 1 - Purchases 2 - Travels 3 - HR 4 - Incidents 5 - Others 6 - Waiting date: date string in the format dd/mm/yyyy; timeFlag: Number that defines the period; 0 - In time 1 - Less than an hour 2 - Overdue timeSLA: numeric integer not null, in minutes; latitude: numeric; longitude: numeric; endSLA: date in alphanumeric in the patterns dd/MM/ yyyy HH:mm or MM/dd/yyyy HH:mm, depending on the locale, which may have null value. task: alphanumeric not empty and not null; personal: boolean that identifies whether the request is signed for the user or if it's from the group; inService: non-null boolean that identifies whether the request is in service; inCheckin: Flag that identifies whether a request is in the checkin Personal (true or false); 0 \u2013 Waiting checkin 1 \u2013 In Cleckin service: alphanumeric not empty and not null; typeRequest: Flag that identifies the type of execution of a request 0 - Request Execution 1 - Request Approval waiting: Flag that defines the status of the request 0 - Monitoring 1 - Execution available contract: numeric not null; unit: numeric not null; priorityorder: numeric value that can present null value, sequence number that identifies if the manager ordered the service;","title":"GetOldest"},{"location":"api/apis.html#getbycoordinates","text":"Recover the most recent request for the user in the group, from the user's current coordinates. Method POST URL < 4biz_URL > /services/v2/getByCoordinates Request { \"notificationType\" : 0 , \"onlyApproval\" : 1 , \"latitude\" : 32.9984730 , \"longitude\" : 29.9984730 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" , \"pager\" : { \"page\" : 1 , \"size\" : 10 } Response { \"dateTime\" : 1377618318000 , \"operationID\" : 336 , \"error\" : null , \"notifications\" : [ { \"number\" : 95933 , \"taskId\" : 22737 , \"type\" : 1 , \"date\" : \"27/08/2013\" , \"timeFlag\" : 12345 , \"timeSLA\" : 12 , \"latitude\" : 32.9984730 , \"longitude\" : 29.9984730 , \"endSLA\" : \"null\" , \"task\" : \"Validate request\" , \"typeRequest\" : 0 , \"waiting\" : 1 \"personal\" : true , \"inService\" : true , \"inCheckin\" : 1 , \"service\" : \"SERVICES AND PRODUCTS REQUEST\" , \"contract\" : 1 , \"unit\" : 15 , \"priorityorder\" : 1 } ], \"paging\" : { \"page\" : 1 , \"size\" : 1 , \"totalElements\" : 5 , \"totalPages\" : 5 } } Fields Request : notificationType: numeric not null; onlyApproval: numeric not null; latitude: numeric not null; longitude: numeric not null; sessionID: alphanumeric not null and not empty; pager: pagination information: page: page number to be queried, starting from 1; size: number of elements to return; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; notifications: not null; number: numeric not null; taskId: numeric not null; type: numeric not empty and not null; 0 - All 1 - Purchases 2 - Travels 3 - HR 4 - Incidents 5 - Others 6 - Waiting date: date string in the format dd/mm/yyyy; timeFlag: Number that defines the period; 0 - In time 1 - Less than an hour 2 - Overdue timeSLA: numeric integer not null, in minutes; latitude: numeric not null; longitude: numeric not null; endSLA: date in alphanumeric in the patterns dd/MM/ yyyy HH:mm or MM/dd/yyyy HH:mm, depending on the locale, which may have null value. task: alphanumeric not empty and not null; personal: boolean that identifies whether the request is signed for the user or if it's from the group; inService: non-null boolean that identifies whether the request is in service; inCheckin: Flag that identifies whether a request is in the checkin Personal (true or false); 0 \u2013 Waiting checkin 1 \u2013 In Cleckin service: alphanumeric not empty and not null; typeRequest: Flag that identifies the type of execution of a request 0 - Request Execution 1 - Request Approval waiting: Flag that defines the status of the request. 0 - Monitoring 1 - Execution available contract: numeric not null; unit: numeric not null; priorityorder: numeric value that can present null value, sequence number that identifies if the manager ordered the service; paging: pagination information 1. page: number of the current page 2. size: size of the page returned 3. totalElements: total of elements according to the query totalPages: total of pages according to the query","title":"GetByCoordinates"},{"location":"api/apis.html#updatenotification","text":"Retrieve the tasks of a service. Method POST URL < 4biz_URL > /services/v2/update Request { number \": 322, \" sessionID \": \" 2355 A 68 BF 75281 B 73607 EEC 1 A 7191645 \" } Response { \"dateTime\" : 1377618318000 , \"operationID\" : 336 , \"error\" : null , \"notifications\" : [ { \"number\" : 95933 , \"taskId\" : 22737 , \"type\" : 1 , \"date\" : \"27/08/2013\" , \"timeFlag\" : 12345 , \"timeSLA\" : 12 , \"latitude\" : 32.9984730 , \"longitude\" : 29.9984730 , \"endSLA\" : \"null\" , \"task\" : \"Validate request\" , \"personal\" : true , \"inService\" : true , \"inCheckin\" : 1 , \"typeRequest\" : 0 , \"waiting\" : 1 \"service: \" SERVICES AND PRODUCTS REQUEST \", \" contract \": 1, \" unit \": 15, \" priorityorder\" : 1 } ] } Fields Request : notificationType: numeric not null; onlyApproval: numeric not null; sessionID: alphanumeric not null and not empty; oldestNumber: numeric not null; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; notifications: not null; number: numeric not null; taskId: numeric not null; type: numeric not empty and not null; 0 - All 1 - Purchases 2 - Travels 3 - HR 4 - Incidents 5 - Others 6 - Waiting date: date string in format dd/mm/yyyy; timeFlag: Number that defines the period; 0 - In time 1 - Less than an hour 2 - Overdue timeSLA: numeric integer not null, in minutes; latitude: numeric; longitude: numeric; endSLA: date in alphanumeric in the patterns dd/MM/ yyyy HH:mm or MM/dd/yyyy HH:mm, depending on the locale, which may have null value. task: alphanumeric not empty and not null; personal: boolean that identifies whether the request is signed for the user or if it's from the group; inService: non-null boolean that identifies whether the request is in service; inCheckin: Flag that identifies whether a request is in the checkin Personal (true or false); 0 \u2013 Waiting checkin 1 \u2013 In Cleckin service: alphanumeric not empty and not null; typeRequest: Flag that identifies the type of execution of a request 0 - Request Execution 1 - Request Approval waiting: Flag that defines the status of the request. 0 - Monitoring 1 - Execution available contract: numeric not null; unit: numeric not null; priorityorder: numeric value that can present null value, sequence number that identifies if the manager ordered the service;","title":"UpdateNotification"},{"location":"api/apis.html#getbyid","text":"Retrieves details of a request, according to its identifier Method POST URL < 4biz_URL > /services/v2/getById Request { \"taskId\" : 22737 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" } Response { \"dateTime\" : 1377618392000 , \"operationID\" : 337 , \"error\" : null , \"notification\" : { \"endSLA\" : \"null\" , \"task\" : \"Validate request\" , \"service\" : \"SERVICES AND PRODUCTS REQUEST\" , \"description\" : \" test\" , \"status\" : \"In progress\" , \"taskStatus\" : \"Available\" , \"timeSLA\" : 12 } } Fields Request : taskId: numeric not null; sessionID: alphanumeric not null and not empty; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; notification; not empty and not null; endSLA: date in alphanumeric by the patterns dd/MM/yyyy HH:mm or MM/dd/yyyy HH:mm, depending on the locale. task: alphanumeric not empty and not null; service: alphanumeric not empty and not null; description: alphanumeric not empty and not null; status: alphanumeric not empty and not null; taskStatus: alphanumeric not empty and not null; timeSLA: numeric integer not null, in minutes;","title":"GetById"},{"location":"api/apis.html#getreasons","text":"Recover motives to be used in the approval of a request, according to the request. Method POST URL < 4biz_URL > /services/v2/getReasons Request { \"taskId\" : 22737 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" } Response { \"dateTime\" : 1377618482000 , \"operationID\" : 339 , \"error\" : null , \"amount\" : 4 , \"reasons\" : [ { \"id\" : 1 , \"desc\" : \"Non-refundable authorization\" }, { \"id\" : 4 , \"desc\" : \"Purchase necessary to the business\" }, { \"id\" : 6 , \"desc\" : \"Purchase need supplied with another solution\" }, { \"id\" : 5 , \"desc\" : \"Value of quotation above the budget of the contract\" } ] } Fields Request : taskId: numeric not null; sessionID: alphanumeric not null and not empty; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; amount: numeric not empty and not null; reasons; not empty and not null; id: numeric not empty and not null; desc: alphanumeric not empty and not null;","title":"GetReasons"},{"location":"api/apis.html#attendrequest","text":"Inform the beginning of attendance of a service request Method POST URL < 4biz_URL > /services/v2/attendRequest Request { \"number\" : 89647 , \"latitude\" : -19.369852147 , \"longitude\" : -49.369852147 , \"dateTime\" : 1377618517000 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" } Response { \"dateTime\" : 1377618517000 , \"operationID\" : 341 , \"error\" : null , \"success\" : true } Fields Request : number: numeric not null; latitude: numeric not null; longitude: numeric not null; dateTime: timestamp not empty and not null; sessionID: alphanumeric not null and not empty; Response : dateTime: timestamp not empty and not nul; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; success: boolean that identifies the successful completion of the operation;","title":"AttendRequest"},{"location":"api/apis.html#attendantlocation","text":"Reports the automatic location of the attendant position. Method POST URL < 4biz_URL > /services/v2/ location Request { \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" , \"latitude\" : -19.369852147 , \"longitude\" : -49.369852147 , \"dateTime\" : 1412102841000 } Response { \"dateTime\" : 1412102841000 , \"operationID\" : 68 , \"error\" : null , \"success\" : true } Fields N/A","title":"AttendantLocation"},{"location":"api/apis.html#feedback","text":"Register an approval or denial of a service request. Method POST URL < 4biz_URL > /services/v2/feedback Request { \"taskId\" : 22736 , \"feedback\" : 0 , \"reasonId\" : 1 , \"comments\" : \"Comments\" , \"sessionID\" : \" 2355 A 68 BF 75281 B 73607 EEC 1 A 7191645 } Response { \"dateTime\" : 1377618517000 , \"operationID\" : 341 , \"error\" : null } Fields Request : taskId: numeric not null; feedback: numeric not null: 0 - request rejection; 1 - request approval; reasonId: numeric not null; comments: alphanumeric not null and not empty; sessionID: alphanumeric not null and not empty; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty;","title":"Feedback"},{"location":"api/apis.html#new","text":"Create a new request. Method POST URL < 4biz_URL > /services/v2/new Request { \"description\" : \"Teste mobile\" , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" , \"latitude\" : -19.369852147 , \"longitude\" : -49.369852147 } Response { \"dateTime\" : 1377618543000 , \"operationID\" : 342 , \"error\" : null , \"number\" : 95935 } Fields Request : description: alphanumeric not null and not empty; sessionID: alphanumeric not null and not empty; latitude: numeric not null; longitude: numeric not null; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; number: alphanumeric not empty and not null;","title":"New"},{"location":"api/apis.html#check-in","text":"Check-in of the attendant in a request. In other words, it initiates the fulfillment of the request. Method POST URL < 4biz_URL > /services/v2/checkin Request { \"taskId\" : 22778 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" , \"latitude\" : -19.369852147 , \"longitude\" : -49.369852147 , \"startTime\" : 1377618543000 } Response { \"dateTime\" : 1377618543000 , \"operationID\" : 342 , \"error\" : null , \"number\" : 95935 } Fields Request : taskId: numeric not null; sessionID: alphanumeric not null and not empty; latitude: numeric not null; longitude: numeric not null; startTime: timestamp not empty and not null of the time that the attendant requests \"Check-in\" Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; number: alphanumeric not empty and not null;","title":"Check-In"},{"location":"api/apis.html#check-out","text":"Checks out an attendant in a request, updating their status (\"Suspended\", \"Solved\", etc.). Method POST URL < 4biz_URL > /services/v2/checkout Request { \"taskId\" : 22778 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" , \"latitude\" : -19.369852147 , \"longitude\" : -49.369852147 , \"status\" : 5 , \"solution\" : 5 , \"descSolution\" : \"Descri\u00e7\u00e3o da Solu\u00e7\u00e3o\" } Response { \"dateTime\" : 1377618517000 , \"operationID\" : 342 , \"error\" : null , \"number\" : 95935 } Fields Request : taskId: numeric not null; sessionID: alphanumeric not null and not empty; latitude: numeric not null; longitude: numeric not null; status: numeric not null, according to return of service \"ListNotivicationStatus\" solution: numeric, informed only when a status of \"Solved (4)\" or \"Suspended (2)\" descSolution: alphanumeric, non-null and non-empty, reported only when status equal to \"Solved (4)\" or \"Suspended (2)\" Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; number: alphanumeric not empty and not null;","title":"Check-Out"},{"location":"api/apis.html#check-indenied","text":"Register the denial of a request attendance by the attendant, in cases of refusal to the check-in. Method POST URL < 4biz_URL > /services/v2/denied Request { \"taskId\" : 22778 , \"sessionID\" : \"2355A68BF75281B73607EEC1A7191645\" , \"latitude\" : -19.369852147 , \"longitude\" : -49.369852147 , \"dateTime\" : 1377618543000 , \"reasonId\" : 1377618543000 } Response { \"dateTime\" : 1377618543000 , \"operationID\" : 342 , \"error\" : null } Fields Request : taskId: numeric not null; sessionID: alphanumeric not empty and not null; latitude: numeric not null; longitude: numeric not null; reasonId: numeric and not null. Obtained by calling the \"GetDeniedReasons\" service; Response : dateTime: timestamp not empty and not null; operationID: numeric not empty and not null; error: alphanumeric value that can be null but not empty; number: alphanumeric not empty and not null;","title":"Check-InDenied"},{"location":"get-started/configure-webservices.html","text":"Configuring Access to 4biz Webservices \u00b6 Description This functionality is intended to link the request executor groups to the Webservices of 4biz Mobile to have access of the Mobile functionalities. Note At the time the group is selected, it will be linked to all 4biz Mobile Webservices in an automated manner. Procedure \u00b6 Access the functionality through the main menu System > Settings > Mobile > 4biz Mobile Web Services ; To view/edit the Web Service information, click on the tab List Web Services ; To configure a group of Web Services, click on the tab Link Groups and then on the field available; Click on \"Search\" to list all groups, then choose the group. Produto/Vers\u00e3o: 4biz | Helium Atualiza\u00e7\u00e3o: 12/12/2018 - Andre Luiz de Oliveira Fernandes","title":"Configuring Access"},{"location":"get-started/configure-webservices.html#configuring-access-to-4biz-webservices","text":"Description This functionality is intended to link the request executor groups to the Webservices of 4biz Mobile to have access of the Mobile functionalities. Note At the time the group is selected, it will be linked to all 4biz Mobile Webservices in an automated manner.","title":"Configuring Access to 4biz Webservices"},{"location":"get-started/configure-webservices.html#procedure","text":"Access the functionality through the main menu System > Settings > Mobile > 4biz Mobile Web Services ; To view/edit the Web Service information, click on the tab List Web Services ; To configure a group of Web Services, click on the tab Link Groups and then on the field available; Click on \"Search\" to list all groups, then choose the group. Produto/Vers\u00e3o: 4biz | Helium Atualiza\u00e7\u00e3o: 12/12/2018 - Andre Luiz de Oliveira Fernandes","title":"Procedure"},{"location":"get-started/load-webservice-script.html","text":"Load Webservice Operations \u00b6 Description The objective is to load the scripts of Webservice operations in the language you have selected. Procedure \u00b6 Access the functionality through the main menu System > Database > Scripts > Upload Webservices Script; Select the language you want; Click on \"Load\". What to do next \u00b6 After load the webservice script, verify the language load through the webservice operation. Related \u00b6 Register Webservice operation Produto/Vers\u00e3o: 4biz | Helium Atualiza\u00e7\u00e3o: 12/12/2018 - Andre Luiz de Oliveira Fernandes","title":"Load Operations"},{"location":"get-started/load-webservice-script.html#load-webservice-operations","text":"Description The objective is to load the scripts of Webservice operations in the language you have selected.","title":"Load Webservice Operations"},{"location":"get-started/load-webservice-script.html#procedure","text":"Access the functionality through the main menu System > Database > Scripts > Upload Webservices Script; Select the language you want; Click on \"Load\".","title":"Procedure"},{"location":"get-started/load-webservice-script.html#what-to-do-next","text":"After load the webservice script, verify the language load through the webservice operation.","title":"What to do next"},{"location":"get-started/load-webservice-script.html#related","text":"Register Webservice operation Produto/Vers\u00e3o: 4biz | Helium Atualiza\u00e7\u00e3o: 12/12/2018 - Andre Luiz de Oliveira Fernandes","title":"Related"},{"location":"get-started/register-webservice.html","text":"Register Webservice operation \u00b6 Description This feature provides various actions, such as including, changing and deleting the webservice operation. Before getting started \u00b6 To enter the service web default operations in the system, it's necessary to previously execute the web service scripts load. Procedure \u00b6 Access the functionality through the main menu System > Webservice > Webservice Operation; Complete the fields available; To add a parameter, click on \"Add Parameter\"; To register a new parameter, click on \"Register new parameter\"; To link groups, click on \"Add Group\"; Click on \"Save\". Produto/Vers\u00e3o: 4biz | Helium Atualiza\u00e7\u00e3o: 12/12/2018 - Andre Luiz de Oliveira Fernandes","title":"Register Operation"},{"location":"get-started/register-webservice.html#register-webservice-operation","text":"Description This feature provides various actions, such as including, changing and deleting the webservice operation.","title":"Register Webservice operation"},{"location":"get-started/register-webservice.html#before-getting-started","text":"To enter the service web default operations in the system, it's necessary to previously execute the web service scripts load.","title":"Before getting started"},{"location":"get-started/register-webservice.html#procedure","text":"Access the functionality through the main menu System > Webservice > Webservice Operation; Complete the fields available; To add a parameter, click on \"Add Parameter\"; To register a new parameter, click on \"Register new parameter\"; To link groups, click on \"Add Group\"; Click on \"Save\". Produto/Vers\u00e3o: 4biz | Helium Atualiza\u00e7\u00e3o: 12/12/2018 - Andre Luiz de Oliveira Fernandes","title":"Procedure"},{"location":"toolkit/script/change-sla.html","text":"Change SLA via Rhino script \u00b6 This functionality is intended to change the SLA through Rhino script. Procedure \u00b6 Access the main menu System > Batch Processing; Click on \"New\"; Complete the fields available, being: type: RhinoScript; NOTE Cron expression: it defines the routine execution time and its content, where it'll be described the context of the routine that will be executed in the tool. content: see script in the next section. Click on \"Save\". Rhino Script \u00b6 var importNames = JavaImporter (); importNames . importPackage ( Packages . java . util ); importNames . importPackage ( Packages . java . lang ); importNames . importPackage ( Packages . java . sql ); importNames . importPackage ( Packages . br . com . centralit . citcorpore . negocio ); importNames . importPackage ( Packages . br . com . centralit . citcorpore . integracao ); importNames . importPackage ( Packages . br . com . centralit . citcorpore . bean ); importNames . importPackage ( Packages . br . com . citframework . util ); importNames . importPackage ( Packages . br . com . citframework . comparacao ); importNames . importPackage ( Packages . br . com . citframework . integracao ); importNames . importPackage ( Packages . br . com . centralit . bpm . integracao ); importNames . importPackage ( Packages . br . com . centralit . bpm . dto ); importNames . importPackage ( Packages . br . com . centralit . citcorpore . bpm . negocio ); importNames . importPackage ( Packages . br . com . citframework . excecao ); var jdbcEngine = new importNames . JdbcEngine ( execucaoFluxo . getTransacao (), null ); var solicitacaoServicoService = new importNames . SolicitacaoServicoServiceEjb (); serviceRequest . setPrazohhAnterior ( serviceRequest . getPrazoHH () ); serviceRequest . setPrazommAnterior ( serviceRequest . getPrazoMM () ); serviceRequest . setRegistradoPor ( usuario . getLogin () ); serviceRequest . setIdJustificativa ( parseInt ( 4 ) ); serviceRequest . setComplementoJustificativa ( \"ANS alterado via fluxo ITSM\" ); serviceRequest . setPrazoHH ( parseInt ( 99 ) ); serviceRequest . setPrazoMM ( parseInt ( 0 ) ); solicitacaoServicoService . updateSLA ( serviceRequest , execucaoFluxo . getTransacao ()); About Product/Version: CITSmart | 8.00 Updated: 01/30/2019 - Anna Martins","title":"Change SLA via Rhino script"},{"location":"toolkit/script/change-sla.html#change-sla-via-rhino-script","text":"This functionality is intended to change the SLA through Rhino script.","title":"Change SLA via Rhino script"},{"location":"toolkit/script/change-sla.html#procedure","text":"Access the main menu System > Batch Processing; Click on \"New\"; Complete the fields available, being: type: RhinoScript; NOTE Cron expression: it defines the routine execution time and its content, where it'll be described the context of the routine that will be executed in the tool. content: see script in the next section. Click on \"Save\".","title":"Procedure"},{"location":"toolkit/script/change-sla.html#rhino-script","text":"var importNames = JavaImporter (); importNames . importPackage ( Packages . java . util ); importNames . importPackage ( Packages . java . lang ); importNames . importPackage ( Packages . java . sql ); importNames . importPackage ( Packages . br . com . centralit . citcorpore . negocio ); importNames . importPackage ( Packages . br . com . centralit . citcorpore . integracao ); importNames . importPackage ( Packages . br . com . centralit . citcorpore . bean ); importNames . importPackage ( Packages . br . com . citframework . util ); importNames . importPackage ( Packages . br . com . citframework . comparacao ); importNames . importPackage ( Packages . br . com . citframework . integracao ); importNames . importPackage ( Packages . br . com . centralit . bpm . integracao ); importNames . importPackage ( Packages . br . com . centralit . bpm . dto ); importNames . importPackage ( Packages . br . com . centralit . citcorpore . bpm . negocio ); importNames . importPackage ( Packages . br . com . citframework . excecao ); var jdbcEngine = new importNames . JdbcEngine ( execucaoFluxo . getTransacao (), null ); var solicitacaoServicoService = new importNames . SolicitacaoServicoServiceEjb (); serviceRequest . setPrazohhAnterior ( serviceRequest . getPrazoHH () ); serviceRequest . setPrazommAnterior ( serviceRequest . getPrazoMM () ); serviceRequest . setRegistradoPor ( usuario . getLogin () ); serviceRequest . setIdJustificativa ( parseInt ( 4 ) ); serviceRequest . setComplementoJustificativa ( \"ANS alterado via fluxo ITSM\" ); serviceRequest . setPrazoHH ( parseInt ( 99 ) ); serviceRequest . setPrazoMM ( parseInt ( 0 ) ); solicitacaoServicoService . updateSLA ( serviceRequest , execucaoFluxo . getTransacao ()); About Product/Version: CITSmart | 8.00 Updated: 01/30/2019 - Anna Martins","title":"Rhino Script"},{"location":"webservice/data-export.html","text":"Webservice - Data Export \u00b6 Through this functionality it is possible, via request to the WebService, to obtain data from the 4biz Database tables for an XML file. The query conditions for the records that will be returned are passed as parameters via URL as the example below: http://localhost/4biz/services/data/cargos/19 This request returns the records of the positions table where the idcargo, that is, the primary key of the charges table, is equal to 19. The query generated with this request is this: SELECT IDCARGO , NOMECARGO , DATAINICIO , DATAFIM , IDDESCRICAOCARGO FROM CARGOS WHERE IDCARGO = 19 Below are listed the possibilities and parameters that can be used for data recovery using this feature: PK Consultation \u00b6 It is possible to obtain a record according to a Primary Key field of the reported table. URL http:// < SERVER ADDRESS > /4biz/services/data/ < TABLE > / < PK VALUE > SQL SELECT * FROM < TABLE_NAME > WHERE < PK_FIELD > = < PK_VALUE > Example http://localhost/4biz/services/data/process/19 It will search the table PROCESS with the PK Key equal to 19. Query by Pk and Where \u00b6 It is possible to obtain a record according to a Primary Key field of the given table and that meets the conditions of a where clause. URL http:// < SERVER ADDRESS * > /4biz/services/data/ < TABLE > / < PK_VALUE > ?cond= < ADDITIONAL_CLAUSES > SQL SELECT * FROM < TABLE_NAME > WHERE < PK_FIELD > = < PK_VALUE > AND ( < ADDITIONAL_CLAUSES > ) Example http://localhost/4biz/services/data/cargos/22?cond=nomecargo like \"Diretor\" Where And Ordered Consultation \u00b6 It is possible to obtain ordered records of a table according to the conditions of a where clause and field for sorted ordering. URL http:// < SERVER ADDRESS * > /4biz/services/data/ < TABLE > ?cond= < WHERE_CRITERIA > & order= < ORDERING FIELD > SQL SELECT * FROM < TABLE_NAME > WHERE ( < WHERE CRITERIA > ) ORDER BY < ORDERING FIELD > Example http://localhost/4biz/services/data/cargos?cond=idcargo<15 and idcargo > 10&order=nomecargo Query with links to Where and Ordering \u00b6 It is possible to obtain ordered records of a table, along with the records with which they are linked, according to the conditions of a where clause and field for ordering. URL http:// < SERVER ADDRESS * > /4biz/services/data/ < TABLE > ?cond= < WHERE_CRITERIA > & order= < ORDERING FIELD > & links= < s_ou_n > SQL SELECT * FROM < TABLE_NAME > WHERE ( < WHERE CRITERIA > ) ORDER BY < ORDERING FIELD > Example http://localhost/4biz/services/data/localidade?cond=idlocalidade=1&order=idlocalidade&links=s Fields cond =Refers to the conditions of the where clause; order = Field that will be used in the order by clause; links = \"S\", or \"N\". When S, the query will also export foreign key bindings. That is, the records of other tables that reference this record. By default, when this option is not entered, the value is N. Produto/Vers\u00e3o: 4biz | 8.00 Atualiza\u00e7\u00e3o: 13/12/2018 - Andre Luiz de Oliveira Fernandes","title":"Data Export"},{"location":"webservice/data-export.html#webservice-data-export","text":"Through this functionality it is possible, via request to the WebService, to obtain data from the 4biz Database tables for an XML file. The query conditions for the records that will be returned are passed as parameters via URL as the example below: http://localhost/4biz/services/data/cargos/19 This request returns the records of the positions table where the idcargo, that is, the primary key of the charges table, is equal to 19. The query generated with this request is this: SELECT IDCARGO , NOMECARGO , DATAINICIO , DATAFIM , IDDESCRICAOCARGO FROM CARGOS WHERE IDCARGO = 19 Below are listed the possibilities and parameters that can be used for data recovery using this feature:","title":"Webservice - Data Export"},{"location":"webservice/data-export.html#pk-consultation","text":"It is possible to obtain a record according to a Primary Key field of the reported table. URL http:// < SERVER ADDRESS > /4biz/services/data/ < TABLE > / < PK VALUE > SQL SELECT * FROM < TABLE_NAME > WHERE < PK_FIELD > = < PK_VALUE > Example http://localhost/4biz/services/data/process/19 It will search the table PROCESS with the PK Key equal to 19.","title":"PK Consultation"},{"location":"webservice/data-export.html#query-by-pk-and-where","text":"It is possible to obtain a record according to a Primary Key field of the given table and that meets the conditions of a where clause. URL http:// < SERVER ADDRESS * > /4biz/services/data/ < TABLE > / < PK_VALUE > ?cond= < ADDITIONAL_CLAUSES > SQL SELECT * FROM < TABLE_NAME > WHERE < PK_FIELD > = < PK_VALUE > AND ( < ADDITIONAL_CLAUSES > ) Example http://localhost/4biz/services/data/cargos/22?cond=nomecargo like \"Diretor\"","title":"Query by Pk and Where"},{"location":"webservice/data-export.html#where-and-ordered-consultation","text":"It is possible to obtain ordered records of a table according to the conditions of a where clause and field for sorted ordering. URL http:// < SERVER ADDRESS * > /4biz/services/data/ < TABLE > ?cond= < WHERE_CRITERIA > & order= < ORDERING FIELD > SQL SELECT * FROM < TABLE_NAME > WHERE ( < WHERE CRITERIA > ) ORDER BY < ORDERING FIELD > Example http://localhost/4biz/services/data/cargos?cond=idcargo<15 and idcargo > 10&order=nomecargo","title":"Where And Ordered Consultation"},{"location":"webservice/data-export.html#query-with-links-to-where-and-ordering","text":"It is possible to obtain ordered records of a table, along with the records with which they are linked, according to the conditions of a where clause and field for ordering. URL http:// < SERVER ADDRESS * > /4biz/services/data/ < TABLE > ?cond= < WHERE_CRITERIA > & order= < ORDERING FIELD > & links= < s_ou_n > SQL SELECT * FROM < TABLE_NAME > WHERE ( < WHERE CRITERIA > ) ORDER BY < ORDERING FIELD > Example http://localhost/4biz/services/data/localidade?cond=idlocalidade=1&order=idlocalidade&links=s Fields cond =Refers to the conditions of the where clause; order = Field that will be used in the order by clause; links = \"S\", or \"N\". When S, the query will also export foreign key bindings. That is, the records of other tables that reference this record. By default, when this option is not entered, the value is N. Produto/Vers\u00e3o: 4biz | 8.00 Atualiza\u00e7\u00e3o: 13/12/2018 - Andre Luiz de Oliveira Fernandes","title":"Query with links to Where and Ordering"},{"location":"webservice/webservice-examples.html","text":"Examples of webservices usage \u00b6 Validate if requester has permission to register a request with the chosen activity \u00b6 This webservice allows 4biz to validate whether the ticket requesters is allowed to register a request with an activity defined by them. Preconditions \u00b6 Configure WebService Operation: request_create Configure contracts, groups, flows and permissions. How to access it \u00b6 Access the URL: /4biz/services/request/create Procedure \u00b6 It's necessary to configure in the Webservice \"request_create\": service property name must have the name of an activity that is active and in production in the portfolio; the syncronize property must be true for a user to be registered; parameter 45 - LDAP - ID Default Group must be configured with a group that has permission to record requests in the group, contract, and flow of requests that will be registered. ATTENTION A method has been added, which registers the new user to the group set in parameter.45 = LDAP - Default Group ID, which is registered at the time WebServide request_create is started.This way, the new employee receives the permission settings from this group. the numberOrigin field must be completed in sequentially, as there is a validation that prevents the registration of a request when the ticket sends an already sent numberOrigin; Some settings in this WebService should be as follows: synchronize\":true, Service must have the property: \"name\": \"Failure - Event Mgmt.\"; Example of call ```sh { \"sessionID\":\"61ec91e9-5397-466c-a342-08bbcd0e76a8\", \"synchronize\":true, \"sourceRequest\":{ \"userID\":\"UserRegistered\", \"type\":\"I\", \"description\": \"Failure - Event Mgmt.\", \"contact\":{ \"name\":\"User Registered\", \"phoneNumber\":\"000000000000\", \"email\":\"user@4biz.com\", \"department\":\"CR 07.014/13.027 - SM Team: Development and Innovation (HSM)\" }, \"service\":{ \"code\":\"170\", \"name\": \"Failure - Event Mgmt.\", \"category\":{ \"name\":\"[4biz] Products\" } }, \"contractID\":\"2\", \"numberOrigin\":\"52362\" } } ``` About Product/Version: 4biz | 8.00 Updated: 09/09/2019 \u2013 Larissa Louren\u00e7o","title":"Examples of webservices usage"},{"location":"webservice/webservice-examples.html#examples-of-webservices-usage","text":"","title":"Examples of webservices usage"},{"location":"webservice/webservice-examples.html#validate-if-requester-has-permission-to-register-a-request-with-the-chosen-activity","text":"This webservice allows 4biz to validate whether the ticket requesters is allowed to register a request with an activity defined by them.","title":"Validate if requester has permission to register a request with the chosen activity"},{"location":"webservice/webservice-examples.html#preconditions","text":"Configure WebService Operation: request_create Configure contracts, groups, flows and permissions.","title":"Preconditions"},{"location":"webservice/webservice-examples.html#how-to-access-it","text":"Access the URL: /4biz/services/request/create","title":"How to access it"},{"location":"webservice/webservice-examples.html#procedure","text":"It's necessary to configure in the Webservice \"request_create\": service property name must have the name of an activity that is active and in production in the portfolio; the syncronize property must be true for a user to be registered; parameter 45 - LDAP - ID Default Group must be configured with a group that has permission to record requests in the group, contract, and flow of requests that will be registered. ATTENTION A method has been added, which registers the new user to the group set in parameter.45 = LDAP - Default Group ID, which is registered at the time WebServide request_create is started.This way, the new employee receives the permission settings from this group. the numberOrigin field must be completed in sequentially, as there is a validation that prevents the registration of a request when the ticket sends an already sent numberOrigin; Some settings in this WebService should be as follows: synchronize\":true, Service must have the property: \"name\": \"Failure - Event Mgmt.\"; Example of call ```sh { \"sessionID\":\"61ec91e9-5397-466c-a342-08bbcd0e76a8\", \"synchronize\":true, \"sourceRequest\":{ \"userID\":\"UserRegistered\", \"type\":\"I\", \"description\": \"Failure - Event Mgmt.\", \"contact\":{ \"name\":\"User Registered\", \"phoneNumber\":\"000000000000\", \"email\":\"user@4biz.com\", \"department\":\"CR 07.014/13.027 - SM Team: Development and Innovation (HSM)\" }, \"service\":{ \"code\":\"170\", \"name\": \"Failure - Event Mgmt.\", \"category\":{ \"name\":\"[4biz] Products\" } }, \"contractID\":\"2\", \"numberOrigin\":\"52362\" } } ``` About Product/Version: 4biz | 8.00 Updated: 09/09/2019 \u2013 Larissa Louren\u00e7o","title":"Procedure"},{"location":"webservice/webservices-docs.html","text":"Webservices 4biz Docs \u00b6 This section is intended to describe the communication structure REST, established between applications and the back-end server. Warning \" 4biz_URL \": URL unalterable prefix, so that you can access the services made available to the mobile applications. ALL API THAT REQUIRES A \u201c sessionID \u201d WILL NEED TO BE IN A SESSION PROVIDED BY THE \u201cLogin\u201d API. Login \u00b6 User Authentication Service Method GET URL < url_base > /cit-portal-web/rest/usuario/getToken Request { \"username\" : \"rogerio.cassimiro\" , \"password\" : \"123456\" } Response { \"id\" : 25080 , \"dateEdition\" : \"2017-09-12T11:06:28.907-0300\" , \"dateCreation\" : \"2017-08-10T10:00:51.274-0300\" , \"username\" : \"rogerio.cassimiro\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" , \"name\" : \"rogerio.cassimiro\" , \"version\" : \":59\" } Fields Request: username: alphanumeric not empty and not null; password :alphanumeric not empty and not null; Response: id: numeric not empty and not null; dateEdition: timestamp not empty and not null; dateCreation: timestamp not empty and not null; username: alphanumeric not empty and not null; token: alphanumeric not empty and not null; name: alphanumeric not empty and not null; version: numeric not empty and not null; LIST DEPARTMENT \u00b6 Service list of departments to be used. Method GET URL < url_base > /cit-ecm-web/integracao /listUnidade Request { \"name\" : \"Department 1\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"units\" :[ { \"id\" : 93794 , \"name\" : \"Department 1\" , \"code\" : \"000001\" } ] } Fields Request: name: alphanumeric not empty and not null token: alphanumeric not empty and not null Response: units: List empty and not null; id: numeric not empty and not null name: alphanumeric not empty and not null code: alphanumeric not empty and not null LIST PROCESS TYPE \u00b6 Service of listing the process type of a process, to be used Method GET URL < url_base > /cit-ecm-web/integracao/listTipoProcesso Request { \"name\" : \"Department 1\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"typeProcess\" :[ { \"id\" : 6967 , \"name\" : \"Pattern process\" , \"description\" : \"Pattern process detailing\" } ] } Fields Request: name: alphanumeric not empty and not null token: alphanumeric not empty and not null Response: typeProcess: List empty and not null; id: numeric not empty and not null name: alphanumeric not empty and not null description: alphanumeric not empty and not null LIST LEVEL ACCESS TYPE PROCESS \u00b6 The subject listing service of a process and / or document, to be used. Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listNivelAcessoTipoProcesso Request { \"idTypeProcess\" : \"54654\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"levelAccessTypeProcess\" :[ { \"idLevelAccessTypeProcess\" : 97942 , \"idLevelAccess:\" : \"23121\" , \"name\" : \"PUBLIC\" }, { \"idLevelAccessTypeProcess\" : 97947 , \" idLevelAccess\" : 91426 , \"name\" : \"RESTRICT\" } ] } Fields Request: idTypeProcess: numeric not empty and not null token: alphanumeric not empty and not null Response: levelAccessTypeProcess: list not empty and not null; idLevelAccess: numeric not empty and not null idLevelAccessTypeProcess: numeric not empty and not null name: alphanumeric not empty and not null LIST LEVEL ACCESS TYPE DOCUMENT \u00b6 The subject listing service of a process and / or document, to be used. Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listNivelAcessoTipoDocumento Request { \"idTypeDocument\" : \"54654\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"levelAccessTypeDocument\" :[ { \"idLevelAccessTypeDocument\" : 97942 , \" idLevelAccess:\" : \"23121\" , \"name\" : \"PUBLIC\" }, { \"idLevelAccessTypeDocument \" : 97947 , \"idLevelAccess\" : 91426 , \"name\" : \"RESTRICTED\" } ] } Fields Request: idTypeDocument: numeric not empty and not null token: alphanumeric not empty and not null Response: levelAccesTypeDocument: list not empty and not null; idLevelAccess: numeric not empty and not null idLevelAccessTypeDocument: numeric not empty and not null name: alphanumeric not empty and not null LIST SUBJECT \u00b6 The subject listing service of a process and / or document, to be used. Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listAssunto Request { \"name\" : \"HEARING.MEETINGS\" \"code\" : \"010.3\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"subjects\" :[ { \"id\" : 6982 , \"code\" : \"010.3\" , \"name\" : \"HEARING.MEETINGS\" , \"subject\" : \"010.3 \u2013 ADMINISTRATION.GENERAL \" } ] } Fields Request: name: alphanumeric not empty and not null code: alphanumeric not empty and not null token: alfanumeric not empty and not null Response: subjects: List empty and not null; id: numeric not empty and not null code: alphanumeric not empty and not null name: alphanumeric not empty and not null subject: alphanumeric not empty and not null LIST LEGAL HYPOTHESES \u00b6 List of legal hypotheses of a process or document, to be used. Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listHipoteseLegal Request { \"idLevelAccess\" : \"97947\" , \"name\" : \"Information name\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"hypoteseLegal\" :[ { \"id\" : 7340 , \"description\" : \"Law description\" , \"name\" : \"Information name\" } ] } Fields Request: idLevelAccess: numeric not empty and not null name: alphanumeric not empty and not null token: alphanumeric not empty and not null Response: hypoteseLegal: List empty and not null; id: numeric not empty and not null description: alphanumeric not empty and not null name: alphanumeric not empty and not null LIST PEOPLE \u00b6 List of interested persons of a process or document, to be used.. Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listPessoas Request { \"name\" : \"Maycon\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"people\" :[ { \"id\" : 98064 , \"name\" : \"Maycon\" } ] } Fields Request: name: alphanumeric not empty and not null token: alphanumeric not empty and not null Response: people: List empty and not null; id: numeric not empty and not null name: alphanumeric not empty and not null LIST FORM OF CONFERENCE \u00b6 List of the conference forms of a process and / or document, to be used Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listFormaConferencia Request { \"name\" : \"Administrative certified copy\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"formConference\" :[ { \"id\" : 97484 , \"name\" : \"Administrative certified copy\" } ] } Fields Request: name: alphanumeric not empty and not null token: alphanumeric not empty and not null Response: formaConference: List empty and not null; id: numeric not empty and not null name: alphanumeric not empty and not null LIST MEDIA TYPES \u00b6 List of media types for a document to be used Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listTipoSuporte Request { \"name\" : \"Name type media\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"typeSupport\" :[ { \"id\" : 97975 , \"name\" : \"Name type media\" } ] } Fields Request: name: alphanumeric not empty and not null token: alphanumeric not empty and not null Response: typeSupport: List empty and not null; id: numeric not empty and not null name: alphanumeric not empty and not null LIST DOCUMENT TYPES \u00b6 Listing service of document types of a document, to be used. Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listTipoDocumento Request { \"name\" : \"Document type name\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"typeDocument\" :[ { \"id\" : 97949 , \"name\" : \"Document type name\" } ] } Fields Request: name: alphanumeric not empty and not null token: alphanumeric not empty and not null Response: typeDocument: List empty and not null; id: numeric not empty and not null name: alphanumeric not empty and not null CREATE PROCESS \u00b6 Service creating a process. Method POST URL < 4biz_URL > /cit-ecm-web/integracao/processo Request { \"assuntoComplementar\" : \"Subject Detail\" , \"observacaoGeral\" : \"General observation\" , \"unidade\" :{ \"id\" : 40358 }, \"tipoProcesso\" :{ \"id\" : 40394 }, \"nivelAcesso\" :{ \"idNivelAcessoTipoProcesso\" : 40395 }, \"assunto\" :{ \"id\" : 40393 }, \"interessados\" :[ { \"interessado\" :{ \"id\" : 40355 } } ], \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"id\" : \"25353\" , \"nup\" : \"00001.00002/2016-58\" } Fields Request: subjectComplementary: alphanumeric not empty and not null observationGeneral: alphanumeric not empty and not null unit: not empty and not null; id: not empty and not null ; typeProcess: not empty and not null; id: not empty and not null ; levelAccess: not empty and not null idLevelAccessTypeProcess: not empty and not null ; hypoteseLegal: not empty and not null if the access level differs from Public. id: numeric not empty and not null subject: not empty and not null ; id: not empty and not null ; interested: can be empty and null; personal token: alphanumeric not empty and not null Response: id: numeric not empty and not null nup: alphanum\u00e9rico not empty and not null; CREATE DOCUMENT \u00b6 Document creation service Method POST URL < 4biz_URL > /cit-ecm-web/integracao/documento Request { \"numero\" : \"9999\" , \"assuntoComplementar\" : \"Complementary Subject\" , \"dataReferencia\" : \"2016-08-19T14:45:25.360-0300\" , \"unidade\" :{ \"id\" : 40358 }, \"processo\" :{ \"id\" : 40503 }, \"tipoDocumento\" :{ \"id\" : 40426 }, \"nivelAcesso\" :{ \"idNivelAcessoTipoDocumento\" : 40427 }, \"hipoteseLegal\" :{ \"id\" : 5658 }, \"assunto\" :{ \"id\" : 40393 }, \"destinatario\" :{ \"id\" : 40355 }, \"tipoSuporteDocumento\" :{ \"id\" : 40430 }, \"interessados\" :[ { \"interessado\" :{ \"id\" : 40355 } } ], \"tipoConferencia\" :{ \"id\" : 39950 }, \"localizacao\" : \"Physical location\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"id\" : \"25353\" , \"numero\" : \"00001.00002/2016-58\" } Fields Request: numero: alphanumeric not empty and not null; assuntoComplementar: alphanumeric not empty and not null localiza\u00e7\u00e3o: alphanumeric may be empty or null; conteudo: not empty and not null; The content of the document should be sent in base64 dataReferencia: timestamp not empty and not null; unidade: not empty and not null; id: numeric not empty and not null processo: not empty and not null; id: numeric not empty and not null tipoDocumento: not empty and not null; id: numeric not empty and not null nivelAcesso: not empty and not null; idNivelAcessoTipoProcesso: numeric not empty and not null hipoteseLegal: not empty and not null, if the n\u00edvel de acesso differs from P\u00fablico; id: numeric not empty and not null assunto: not empty and not null; id: numeric not empty and not null destinatario: not empty and not null; pessoa: not empty and not null; id: numeric not empty and not null; tipoSuporteDocumento: not empty and not null; interessados: can be empty and null; pessoa: not empty and not null; id: numeric not empty and not null; tipoConferencia: boolean not empty and not null; localiza\u00e7\u00e3o: alphanumeric not null and non-empty, if the tipoConferencia attribute is true; token: alfanumeric not empty and not null Response: id: numeric not empty and not null numero: not empty and not null UPLOAD DOCUMENT \u00b6 Document creation service Method POST URL < 4biz_URL > /cit-ecm-web/integracao/uploadAnexo Request { \"file\" : \"9999\" , \"idDocumento\" : \"25353\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response N/A ```tab= \"Fields\" Request: idDocumento: numeric not empty and not null file: not empty and not null token: alphanumeric not empty and not null GET BY ID PROCESS \u00b6 Service that retrieves details of a process, according to its identifier. Method GET URL < 4biz_URL > /cit-ecm-web/integracao/getByIdProcesso Request { \"id\" : 6967 } Response { \"id\" : \"5252\" , \"assuntoComplementar\" : \"Complementary Subject\" , \"observacaoGeral\" : \"General observation\" , \"dataReferencia\" : null , \"situacao\" : \"In progress\" , \"tipoProcesso\" :{ \"id\" : 97930 , \"nome\" : \"Type reserved process\" }, \"nivelAcesso\" :{ \" idNivelAcessoTipoProcesso \" : 91428 , \"descricao\" : \"Public\" }, \"hipoteseLegal\" :{ \"id\" : 97841 , \"nome\" : \"Information name\" }, \"assunto\" :{ \"id\" : 97839 , \"nome\" : \"ADM\" , \"assunto\" : \"0001 - ADM \" }, \"interessados\" :[ { \"pessoas\" :{ \"id\" : 98064 , \"nome\" : \"Maycon\" } } ], \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Fields Request: id: numeric not empty and not null token: alphanumeric not empty and not null Response: assuntoComplementar: alphanumeric not empty and not null observacaoGeral: alphanumeric not empty and not null dataReferencia: unidade: not empty and not null; id: numeric not empty and not null nome: alfphanumeric not empty and not null tipoProcesso: not empty and not null; id: numeric not empty and not null nome: alphanumeric not empty and not null nivelAcesso: not empty and not null idNivelAcessoTipoProcesso: numeric not empty and not null descricao: alphanumeric not empty and not null hipoteseLegal: not empty and not null, if the access level differs from Public. id: numeric not empty and not null nome: alphanumeric not empty and not null assunto: not empty and not null; id: numeric not empty and not null assunto: alphanumeric not empty and not null interessados: can be empty and null; pessoa: not empty and not null; id: numeric not empty and not null; nome: : alphanumeric not empty and not null LIST PROCESS \u00b6 Listing of processes to be used by a document Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listProcesso Request { \"nup\" : \"00010.000012/2016-94\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"processo\" :[ { \"id\" : \"5252\" , \"assuntoComplementar\" : \"Complementary Subject\" , \"nup\" : \"00010.000012/2016-94\" , \"status\" : \"Complementary Subject\" , \"tipoProcesso\" :{ \"id\" : 97930 , \"nome\" : \"type reserved process\" }, \"nivelAcesso\" :{ \"descricao\" : \"P\u00fablico\" }, \"assunto\" :{ \"id\" : 97839 , \"nome\" : \"ADM\" , \"assunto\" : \"0001 - ADM\" }, \"hipoteseLegal\" :{ \"id\" : 97841 , \"nome\" : \"Information name hypothesis\" } } ] } Fields Request: nup: alphanumeric may be empty or null; token: alphanumeric not empty and not null Response: id: numeric not empty and not null assuntoComplementar: alphanumeric not empty and not null status: alphanumeric not empty and not null CONCLUIDO: \"Completed\"; EM_ANDAMENTO: \"In progress\"; AGUARDANDO_VALIDACAO: \"Waiting for Validation\" VALIDADO: \"Validated\"; ANEXADO: \"Attached\"; tipoProcesso: not empty and not null; id: numeric not empty and not null nome: alphanumeric not empty and not null nivelAcesso: not empty and not null idNivelAcessoTipoProcesso: numeric not empty and not null descricao: alphanumeric not empty and not null hipoteseLegal: not empty and not null, if the accessLevel differs from Public. id: numeric not empty and not null nome: alphanumeric not empty and not null assunto: not empty and not null ; id: numeric not empty and not null assunto: alphanumeric not empty and not null hipoteseLegal: not empty and not null, if the levelAccess differs from Public. id: numeric not empty and not null name: alphanumeric not empty and not null Produto/Vers\u00e3o: 4biz | 8.00 Atualiza\u00e7\u00e3o: 13/12/2018 - Andre Luiz de Oliveira Fernandes","title":"Webservices - Docs"},{"location":"webservice/webservices-docs.html#webservices-4biz-docs","text":"This section is intended to describe the communication structure REST, established between applications and the back-end server. Warning \" 4biz_URL \": URL unalterable prefix, so that you can access the services made available to the mobile applications. ALL API THAT REQUIRES A \u201c sessionID \u201d WILL NEED TO BE IN A SESSION PROVIDED BY THE \u201cLogin\u201d API.","title":"Webservices 4biz Docs"},{"location":"webservice/webservices-docs.html#login","text":"User Authentication Service Method GET URL < url_base > /cit-portal-web/rest/usuario/getToken Request { \"username\" : \"rogerio.cassimiro\" , \"password\" : \"123456\" } Response { \"id\" : 25080 , \"dateEdition\" : \"2017-09-12T11:06:28.907-0300\" , \"dateCreation\" : \"2017-08-10T10:00:51.274-0300\" , \"username\" : \"rogerio.cassimiro\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" , \"name\" : \"rogerio.cassimiro\" , \"version\" : \":59\" } Fields Request: username: alphanumeric not empty and not null; password :alphanumeric not empty and not null; Response: id: numeric not empty and not null; dateEdition: timestamp not empty and not null; dateCreation: timestamp not empty and not null; username: alphanumeric not empty and not null; token: alphanumeric not empty and not null; name: alphanumeric not empty and not null; version: numeric not empty and not null;","title":"Login"},{"location":"webservice/webservices-docs.html#list-department","text":"Service list of departments to be used. Method GET URL < url_base > /cit-ecm-web/integracao /listUnidade Request { \"name\" : \"Department 1\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"units\" :[ { \"id\" : 93794 , \"name\" : \"Department 1\" , \"code\" : \"000001\" } ] } Fields Request: name: alphanumeric not empty and not null token: alphanumeric not empty and not null Response: units: List empty and not null; id: numeric not empty and not null name: alphanumeric not empty and not null code: alphanumeric not empty and not null","title":"LIST DEPARTMENT"},{"location":"webservice/webservices-docs.html#list-process-type","text":"Service of listing the process type of a process, to be used Method GET URL < url_base > /cit-ecm-web/integracao/listTipoProcesso Request { \"name\" : \"Department 1\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"typeProcess\" :[ { \"id\" : 6967 , \"name\" : \"Pattern process\" , \"description\" : \"Pattern process detailing\" } ] } Fields Request: name: alphanumeric not empty and not null token: alphanumeric not empty and not null Response: typeProcess: List empty and not null; id: numeric not empty and not null name: alphanumeric not empty and not null description: alphanumeric not empty and not null","title":"LIST PROCESS TYPE"},{"location":"webservice/webservices-docs.html#list-level-access-type-process","text":"The subject listing service of a process and / or document, to be used. Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listNivelAcessoTipoProcesso Request { \"idTypeProcess\" : \"54654\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"levelAccessTypeProcess\" :[ { \"idLevelAccessTypeProcess\" : 97942 , \"idLevelAccess:\" : \"23121\" , \"name\" : \"PUBLIC\" }, { \"idLevelAccessTypeProcess\" : 97947 , \" idLevelAccess\" : 91426 , \"name\" : \"RESTRICT\" } ] } Fields Request: idTypeProcess: numeric not empty and not null token: alphanumeric not empty and not null Response: levelAccessTypeProcess: list not empty and not null; idLevelAccess: numeric not empty and not null idLevelAccessTypeProcess: numeric not empty and not null name: alphanumeric not empty and not null","title":"LIST LEVEL ACCESS TYPE PROCESS"},{"location":"webservice/webservices-docs.html#list-level-access-type-document","text":"The subject listing service of a process and / or document, to be used. Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listNivelAcessoTipoDocumento Request { \"idTypeDocument\" : \"54654\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"levelAccessTypeDocument\" :[ { \"idLevelAccessTypeDocument\" : 97942 , \" idLevelAccess:\" : \"23121\" , \"name\" : \"PUBLIC\" }, { \"idLevelAccessTypeDocument \" : 97947 , \"idLevelAccess\" : 91426 , \"name\" : \"RESTRICTED\" } ] } Fields Request: idTypeDocument: numeric not empty and not null token: alphanumeric not empty and not null Response: levelAccesTypeDocument: list not empty and not null; idLevelAccess: numeric not empty and not null idLevelAccessTypeDocument: numeric not empty and not null name: alphanumeric not empty and not null","title":"LIST LEVEL ACCESS TYPE DOCUMENT"},{"location":"webservice/webservices-docs.html#list-subject","text":"The subject listing service of a process and / or document, to be used. Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listAssunto Request { \"name\" : \"HEARING.MEETINGS\" \"code\" : \"010.3\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"subjects\" :[ { \"id\" : 6982 , \"code\" : \"010.3\" , \"name\" : \"HEARING.MEETINGS\" , \"subject\" : \"010.3 \u2013 ADMINISTRATION.GENERAL \" } ] } Fields Request: name: alphanumeric not empty and not null code: alphanumeric not empty and not null token: alfanumeric not empty and not null Response: subjects: List empty and not null; id: numeric not empty and not null code: alphanumeric not empty and not null name: alphanumeric not empty and not null subject: alphanumeric not empty and not null","title":"LIST SUBJECT"},{"location":"webservice/webservices-docs.html#list-legal-hypotheses","text":"List of legal hypotheses of a process or document, to be used. Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listHipoteseLegal Request { \"idLevelAccess\" : \"97947\" , \"name\" : \"Information name\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"hypoteseLegal\" :[ { \"id\" : 7340 , \"description\" : \"Law description\" , \"name\" : \"Information name\" } ] } Fields Request: idLevelAccess: numeric not empty and not null name: alphanumeric not empty and not null token: alphanumeric not empty and not null Response: hypoteseLegal: List empty and not null; id: numeric not empty and not null description: alphanumeric not empty and not null name: alphanumeric not empty and not null","title":"LIST LEGAL HYPOTHESES"},{"location":"webservice/webservices-docs.html#list-people","text":"List of interested persons of a process or document, to be used.. Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listPessoas Request { \"name\" : \"Maycon\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"people\" :[ { \"id\" : 98064 , \"name\" : \"Maycon\" } ] } Fields Request: name: alphanumeric not empty and not null token: alphanumeric not empty and not null Response: people: List empty and not null; id: numeric not empty and not null name: alphanumeric not empty and not null","title":"LIST PEOPLE"},{"location":"webservice/webservices-docs.html#list-form-of-conference","text":"List of the conference forms of a process and / or document, to be used Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listFormaConferencia Request { \"name\" : \"Administrative certified copy\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"formConference\" :[ { \"id\" : 97484 , \"name\" : \"Administrative certified copy\" } ] } Fields Request: name: alphanumeric not empty and not null token: alphanumeric not empty and not null Response: formaConference: List empty and not null; id: numeric not empty and not null name: alphanumeric not empty and not null","title":"LIST FORM OF CONFERENCE"},{"location":"webservice/webservices-docs.html#list-media-types","text":"List of media types for a document to be used Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listTipoSuporte Request { \"name\" : \"Name type media\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"typeSupport\" :[ { \"id\" : 97975 , \"name\" : \"Name type media\" } ] } Fields Request: name: alphanumeric not empty and not null token: alphanumeric not empty and not null Response: typeSupport: List empty and not null; id: numeric not empty and not null name: alphanumeric not empty and not null","title":"LIST MEDIA TYPES"},{"location":"webservice/webservices-docs.html#list-document-types","text":"Listing service of document types of a document, to be used. Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listTipoDocumento Request { \"name\" : \"Document type name\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"typeDocument\" :[ { \"id\" : 97949 , \"name\" : \"Document type name\" } ] } Fields Request: name: alphanumeric not empty and not null token: alphanumeric not empty and not null Response: typeDocument: List empty and not null; id: numeric not empty and not null name: alphanumeric not empty and not null","title":"LIST DOCUMENT TYPES"},{"location":"webservice/webservices-docs.html#create-process","text":"Service creating a process. Method POST URL < 4biz_URL > /cit-ecm-web/integracao/processo Request { \"assuntoComplementar\" : \"Subject Detail\" , \"observacaoGeral\" : \"General observation\" , \"unidade\" :{ \"id\" : 40358 }, \"tipoProcesso\" :{ \"id\" : 40394 }, \"nivelAcesso\" :{ \"idNivelAcessoTipoProcesso\" : 40395 }, \"assunto\" :{ \"id\" : 40393 }, \"interessados\" :[ { \"interessado\" :{ \"id\" : 40355 } } ], \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"id\" : \"25353\" , \"nup\" : \"00001.00002/2016-58\" } Fields Request: subjectComplementary: alphanumeric not empty and not null observationGeneral: alphanumeric not empty and not null unit: not empty and not null; id: not empty and not null ; typeProcess: not empty and not null; id: not empty and not null ; levelAccess: not empty and not null idLevelAccessTypeProcess: not empty and not null ; hypoteseLegal: not empty and not null if the access level differs from Public. id: numeric not empty and not null subject: not empty and not null ; id: not empty and not null ; interested: can be empty and null; personal token: alphanumeric not empty and not null Response: id: numeric not empty and not null nup: alphanum\u00e9rico not empty and not null;","title":"CREATE PROCESS"},{"location":"webservice/webservices-docs.html#create-document","text":"Document creation service Method POST URL < 4biz_URL > /cit-ecm-web/integracao/documento Request { \"numero\" : \"9999\" , \"assuntoComplementar\" : \"Complementary Subject\" , \"dataReferencia\" : \"2016-08-19T14:45:25.360-0300\" , \"unidade\" :{ \"id\" : 40358 }, \"processo\" :{ \"id\" : 40503 }, \"tipoDocumento\" :{ \"id\" : 40426 }, \"nivelAcesso\" :{ \"idNivelAcessoTipoDocumento\" : 40427 }, \"hipoteseLegal\" :{ \"id\" : 5658 }, \"assunto\" :{ \"id\" : 40393 }, \"destinatario\" :{ \"id\" : 40355 }, \"tipoSuporteDocumento\" :{ \"id\" : 40430 }, \"interessados\" :[ { \"interessado\" :{ \"id\" : 40355 } } ], \"tipoConferencia\" :{ \"id\" : 39950 }, \"localizacao\" : \"Physical location\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"id\" : \"25353\" , \"numero\" : \"00001.00002/2016-58\" } Fields Request: numero: alphanumeric not empty and not null; assuntoComplementar: alphanumeric not empty and not null localiza\u00e7\u00e3o: alphanumeric may be empty or null; conteudo: not empty and not null; The content of the document should be sent in base64 dataReferencia: timestamp not empty and not null; unidade: not empty and not null; id: numeric not empty and not null processo: not empty and not null; id: numeric not empty and not null tipoDocumento: not empty and not null; id: numeric not empty and not null nivelAcesso: not empty and not null; idNivelAcessoTipoProcesso: numeric not empty and not null hipoteseLegal: not empty and not null, if the n\u00edvel de acesso differs from P\u00fablico; id: numeric not empty and not null assunto: not empty and not null; id: numeric not empty and not null destinatario: not empty and not null; pessoa: not empty and not null; id: numeric not empty and not null; tipoSuporteDocumento: not empty and not null; interessados: can be empty and null; pessoa: not empty and not null; id: numeric not empty and not null; tipoConferencia: boolean not empty and not null; localiza\u00e7\u00e3o: alphanumeric not null and non-empty, if the tipoConferencia attribute is true; token: alfanumeric not empty and not null Response: id: numeric not empty and not null numero: not empty and not null","title":"CREATE DOCUMENT"},{"location":"webservice/webservices-docs.html#upload-document","text":"Document creation service Method POST URL < 4biz_URL > /cit-ecm-web/integracao/uploadAnexo Request { \"file\" : \"9999\" , \"idDocumento\" : \"25353\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response N/A ```tab= \"Fields\" Request: idDocumento: numeric not empty and not null file: not empty and not null token: alphanumeric not empty and not null","title":"UPLOAD DOCUMENT"},{"location":"webservice/webservices-docs.html#get-by-id-process","text":"Service that retrieves details of a process, according to its identifier. Method GET URL < 4biz_URL > /cit-ecm-web/integracao/getByIdProcesso Request { \"id\" : 6967 } Response { \"id\" : \"5252\" , \"assuntoComplementar\" : \"Complementary Subject\" , \"observacaoGeral\" : \"General observation\" , \"dataReferencia\" : null , \"situacao\" : \"In progress\" , \"tipoProcesso\" :{ \"id\" : 97930 , \"nome\" : \"Type reserved process\" }, \"nivelAcesso\" :{ \" idNivelAcessoTipoProcesso \" : 91428 , \"descricao\" : \"Public\" }, \"hipoteseLegal\" :{ \"id\" : 97841 , \"nome\" : \"Information name\" }, \"assunto\" :{ \"id\" : 97839 , \"nome\" : \"ADM\" , \"assunto\" : \"0001 - ADM \" }, \"interessados\" :[ { \"pessoas\" :{ \"id\" : 98064 , \"nome\" : \"Maycon\" } } ], \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Fields Request: id: numeric not empty and not null token: alphanumeric not empty and not null Response: assuntoComplementar: alphanumeric not empty and not null observacaoGeral: alphanumeric not empty and not null dataReferencia: unidade: not empty and not null; id: numeric not empty and not null nome: alfphanumeric not empty and not null tipoProcesso: not empty and not null; id: numeric not empty and not null nome: alphanumeric not empty and not null nivelAcesso: not empty and not null idNivelAcessoTipoProcesso: numeric not empty and not null descricao: alphanumeric not empty and not null hipoteseLegal: not empty and not null, if the access level differs from Public. id: numeric not empty and not null nome: alphanumeric not empty and not null assunto: not empty and not null; id: numeric not empty and not null assunto: alphanumeric not empty and not null interessados: can be empty and null; pessoa: not empty and not null; id: numeric not empty and not null; nome: : alphanumeric not empty and not null","title":"GET BY ID PROCESS"},{"location":"webservice/webservices-docs.html#list-process","text":"Listing of processes to be used by a document Method GET URL < 4biz_URL > /cit-ecm-web/integracao/listProcesso Request { \"nup\" : \"00010.000012/2016-94\" , \"token\" : \"TGT-17-BI06OJWapCune4uamf6zUDOcyf0GNPPxjrOSDJ66ZxtcthZGhf-CITDFSRV074\" } Response { \"processo\" :[ { \"id\" : \"5252\" , \"assuntoComplementar\" : \"Complementary Subject\" , \"nup\" : \"00010.000012/2016-94\" , \"status\" : \"Complementary Subject\" , \"tipoProcesso\" :{ \"id\" : 97930 , \"nome\" : \"type reserved process\" }, \"nivelAcesso\" :{ \"descricao\" : \"P\u00fablico\" }, \"assunto\" :{ \"id\" : 97839 , \"nome\" : \"ADM\" , \"assunto\" : \"0001 - ADM\" }, \"hipoteseLegal\" :{ \"id\" : 97841 , \"nome\" : \"Information name hypothesis\" } } ] } Fields Request: nup: alphanumeric may be empty or null; token: alphanumeric not empty and not null Response: id: numeric not empty and not null assuntoComplementar: alphanumeric not empty and not null status: alphanumeric not empty and not null CONCLUIDO: \"Completed\"; EM_ANDAMENTO: \"In progress\"; AGUARDANDO_VALIDACAO: \"Waiting for Validation\" VALIDADO: \"Validated\"; ANEXADO: \"Attached\"; tipoProcesso: not empty and not null; id: numeric not empty and not null nome: alphanumeric not empty and not null nivelAcesso: not empty and not null idNivelAcessoTipoProcesso: numeric not empty and not null descricao: alphanumeric not empty and not null hipoteseLegal: not empty and not null, if the accessLevel differs from Public. id: numeric not empty and not null nome: alphanumeric not empty and not null assunto: not empty and not null ; id: numeric not empty and not null assunto: alphanumeric not empty and not null hipoteseLegal: not empty and not null, if the levelAccess differs from Public. id: numeric not empty and not null name: alphanumeric not empty and not null Produto/Vers\u00e3o: 4biz | 8.00 Atualiza\u00e7\u00e3o: 13/12/2018 - Andre Luiz de Oliveira Fernandes","title":"LIST PROCESS"},{"location":"webservice/webservices-esp.html","text":"Webservices for use on 4biz \u00b6 This document is intended to provide guidance regarding the Web Services made available for integration with 4biz Service Management. Web Services have been created in 4biz for inclusion, updating, consultation and cancellation of service requests (incidents and requisitions). Before getting started \u00b6 Before any 4biz REST operation is used, the user must be authenticated. Authentication is done through the REST login operation in the URL /services/login , which receives a CtLogin object containing the userName , password , and platform attributes. The platform attribute must contain the ID of the site that is requesting the service. The login operation returns an alphanumeric value in the SessionID attribute. This same SessionID must be used in the other REST calls. The returned object contains the code and description of the error in case of problems in executing the login operation. The authenticated user composes the key for data synchronization, when the synchronize attribute is set to true . Request inclusion and update services rely on the synchronize attribute. When this attribute is true , the user registration and catalog services are automatically created or updated in 4biz from the information sent in the Web Service request. RULE All REST services created in 4biz receive an input object and return an object. In case of error, the return object contains the code and description of the error. When there is no error, in addition to the attributes defined for each service, the return object contains the date and time of execution and the id of the operation. 4biz ensures that every request is recorded in its database and an operation ID is returned to the requester, even in case of error. Actions \u00b6 Create a Ticket \u00b6 Creating a Request /Incident URL /services/request/create Input Attributes -synchronize - indicates whether the user and / or service information will be synchronized. -sourceRequest - request information from the CtRequest class, containing: -numberOrigin - the request number in the source system (mandatory. This attribute is required for 4biz to keep FROM-TO between its database and the original source system number. -type - request type (required). Possible values: I = Incident or R = Request. -description - description of the incident or request (required). -userID - applicant's user ID (required). It will be included if it does not exist in the 4biz database and the synchronize attribute is equal to true. -contact - data of the applicant. Required when the requestor does not exist in 4biz and the synchronize attribute is equal to true). -name - applicant name (required). -phoneNumber - applicant's phone number (required). -e-mail - applicant's e-mail (required). -contractID - contract number in 4biz (optional). If not informed, 4biz will include the request linked to the default contract parameterized in the service. -service - service data (optional). If not informed, 4biz will include the request linked to the default service parameterized in the WebService registry. -code - service code. Optional, if service name is given). -name - service Name. Required when the service does not exist in 4biz and the synchronize attribute is true. -category - category of service. Required when the service does not exist in 4biz and the synchronize attribute is true. -code - category code. -name - category name. -urgency - urgency of the request (optional). Possible values: H = High, M = Average, L = Low. If not informed, the urgency will be calculated from the 4biz service catalog parameters. -impact of request (optional). Possible values: H = High, M = Medium, L = Low. If not informed, the impact will be calculated from the 4biz service catalog parameters. -groupId - execution group acronym in 4biz (optional). If not informed, the executor group will be obtained from the 4biz service catalog parameters. Output Attributes Output Attributes are composed of all Input Attributes of the CtRequest class plus the following information: number - number of the request created in 4biz. startSLA - SLA start date and time. endSLA - SLA end date and time. status - status of the request, containing: code - code of the situation. name - name of the situation. currentTask - current task, containing: number - task number name - name of the task. startDateTime - start date and time status - task status, containing: code: code of the situation. name: name of the situation. userId - login of the user responsible for the task. groupId - acronym of the group responsible for the task. JSON Example { \"Synchronize\" : true , \"sourceRequest\" : { \"numberOrigin\" : \"9999\" , \"type\" : \"R\" , \"userID\" : \" 61 84460708 \" , \" email \" : \" fulano.de.tal@centralit.com.br \" , \" department \" : \" Department of the So-and-so \" , \" name \" : \" So-and-so \" }, \" description \" : \" REST v3 \" , \" service \" : { \" name \" : \" SERVICE.TEST.1 \" , \" category \" : { \" name \" : \" Category 1 \" }}, \" contractID \" : \" 1 \" , \" urgency \" : \"H\" , \"impact\" : \"H\" } } Assuming that the platform attribute in the login was informed by user and considering the synchronize attribute equal to true , the 4 biz will: - Check if there is an FROM-TO of contract 1 for the \"user\" ; - Include the applicant in the user registry, if it does not exist in the database; - Include the service in the service catalog of contract 1 , if it does not exist in the database and register the service FROM-TO for the client; - Include request with source number 9999 ; - Register the DEPUT from the 9999 source request to the client. Change ticket information \u00b6 Changing Information from Requests/Incidents URL /services/request/create Input Attributes \u200b\u200bsynchronize - indicates whether the user and / or service information will be synchronized. request - request information from the CtRequest class, containing: numberOrigin - the request number on the source system. Required when the number attribute is not entered. description - description of the incident or request (optional). userID - applicant's user ID (required). It will be included if it does not exist in the 4biz database and the synchronize attribute is equal to true. number - request number in 4biz (required). contact - data of the applicant. Required when the requestor does not exist in 4biz and the synchronize attribute is equal to true). name - applicant name (required). phoneNumber - applicant's phone number (required). e-mail - applicant's e-mail (required)). \u200b service - service data (optional). code - service code. Optional, if service name is given). name - service Name. Required when the service does not exist in 4biz and the synchronize attribute is true. category -category of service. Required when the service does not exist in 4biz and the synchronize attribute is true. Code - category code. Name - category name. Urgency - urgency of the request (optional). Possible values: H = High, M = Average, L = Low. If not informed, the urgency will be calculated from the 4biz service catalog parameters. Impact of request (optional). Possible values: H = High, M = Medium, L = Low. If not informed, the impact will be calculated from the 4biz service catalog parameters. Output Attributes Same as the Input JSON Example { \"Synchronize\" : true , \"request\" : { \"numberOrigin\" : \"9999\" , \"userID\" : \"ciclano.de.tal\" , \"contact\" : { \"phoneNumber\" : \"61 84460709\" , \"email\" \"Cyclone\" , \"name\" : \"Cyclone of such\" }, \"description\" : \"Inclusion of request using REST v3 - Changed\" , \"cyclano.de.tal@centralit.com.br\" , \"department\" \"Service\" : { \"name\" : \"SERVICO.TESTE.2\" , \"category\" : { \"name\" : \"Category 2\" }}}} Assuming that the platform attribute in the login was informed by \"user\" and considering the synchronize attribute equal to true , the 4 biz will: Include the applicant in the user registry, if it does not exist in the database; Include the service in the service catalog of contract 1 , if it does not exist in the database and register the service FROM-TO for the client; Change the requestor and service from the request with source number 9999 . Change ticket status \u00b6 Changing the Status of an Incidents/Requests URL /services/request/updateStatus Input Attributes \u200b\u200bnumber - request number in 4biz. Required when the numberOrigin attribute is not informed. numberOrigin - the request number on the source system. Required when the number attribute is not entered. status - status of the request, containing: code - situation code (required). Possible values: On End, Suspended, Canceled, Resolved, Reopened, Closed. details - complement of justification to change the situation (optional). Output Attributes Same as the Input JSON Example { \"numberOrigin\" : \"9999\" , \"status\" : { \"code\" : \"Suspended\" , \"details\" : \"Integration Testing\" }} INQUIRE THE APPLICANT's INCIDENTS AND REQUESTS \u00b6 Inquire the applicant's Incidents and Requests URL /services/request/getByUser Input Attributes userID - applicant's user ID (required). description - description of the incident or request (optional). startDate - start date of the request (optional). endDate - end date of the request (optional). service - service data (optional). code - service code. name - name of the service. contractID - contract number in 4biz (optional). status - request status (optional), containing: code - Location code. Possible values: Ending, Suspended, Canceled, Resolved, Reopened, Closed, Reclassified. Output Attributes Collection of objects of class CtRequest containing: number - request number in 4biz. numberOrigin - the request number on the source system. type - type of request. Possible values: I = Incident or R = Request description - description of the incident or request. userID - user ID of the requester. urgency - urgency of the request (optional). Possible values: H = High, M = Average, L = Low. If not informed, the urgency will be calculated from the 4biz service catalog parameters. impact of request (optional). Possible values: H = High, M = Medium, L = Low. If not informed, the impact will be calculated from the 4biz service catalog parameters. groupId - execution group acronym in 4biz (optional). If not informed, the executor group will be obtained from the 4biz service catalog parameters. startDateTime - the start date and time of the request. startSLA - SLA start date and time. endSLA - end date and time of the SLA. status - status of the request, containing: code - code of the situation. name -name of the situation. JSON Example { \"userID\" : \"john elliot \" , \"startDate\" : \"2015-09-16T03:00:00.000Z\" , \"endDate\" : \"2015-09-19T03:00:00.000Z\" } Datails of ticket applicant \u00b6 Details of The Request/Incident URL /services/request/getById Input Attributes number - request number in 4biz. Required when the numberOrigin attribute is not informed. numberOrigin - request number in the source system. Required when the number attribute is not entered. Output Attributes Output Attributes are composed of all Input Attributes of the CtRequest class plus the following information: number - number of the request created in 4biz. startSLA - SLA start date and time. endSLA - SLA end date and time. status - status of the request, containing: code - code of the situation. name - name of the situation. currentTask - current task, containing: number - task number name - name of the task. startDateTime - start date and time status - task status, containing: code: code of the situation. name: name of the situation. userId - login of the user responsible for the task. groupId - acronym of the group responsible for the task. JSON Example { \"numberOrigin\" : \"9999\" } Include occurrence in ticket \u00b6 Include an occourrence on a Request URL /services/request/createOccurrence Input Attributes requestNumber - request number in 4biz. Required when the requestNumberOrigin attribute is not informed. requestNumberOrigin - request number in the source system. Required when the requestNumber attribute is not informed. ocurrence - object of class CtOccurrence, containing: numberOrigin - occurrence number in the source system (optional). description - occurrence description. date - date of record of occurrence. hour - time to record the occurrence in the format HH: MM. category - category of occurrence. Possible values: Monitoring, Update, Diagnostics, Investigation, Memo, Information, Return, Symptom, Outline, Scheduling. reason - reason for occurrence. Output Attributes Object of class CtOcurrence containing: number - event number in 4biz. numberOrigin - occurrence number in the source system. description - occurrence description. date - date of record of occurrence. Hour - time to record the occurrence in the format HH: MM. userID - identification of the user responsible for recording the occurrence. origin - origin of occurrence. Possible values: EMAIL, FONE_FAX, VOICE_MAIL, PERSONALLY, OTHERS. category - category of occurrence. Possible Values: Creation, Monitoring, Update, Diagnosis, Investigation, Memo, Information, Return, Symptom, Outline, Executing, Exchanging, Reclaiming, Reclassification, Schedule, Suspend, Reopen, Targeting, Sharing, Cancellation Task, HomeSLA, SuspendedSLA, Approval, ReactivationSLA elapsedTime - elapsed time (for Category of Executing type) reason \u2013 reason for occurrence. task - the task associated with the occurrence, containing: number - task number. name - name of the task. startDateTime - start date and time. endDateTime - date and time of execution. status - status of the task, containing: code - location code. name - name of the situation. userId - login of the user responsible for the execution of the task. JSON Example { \"requestNumberOrigin\" : \"9999\" , \"occurrence\" : { \"description\" : \"Occurrence test\" , \"category\" : { \"code\" : \"Workaround solution\" }, \"date\" : \"2015-08-20T03:00:00.000Z\" , \"hour\" : \"2219\" }} Query ticket occurences \u00b6 Querying Information from Requests/Incidents URL /services/request/listOccurrences Input Attributes requestNumber - request number in 4biz. Required when the requestNumberOrigin attribute is not informed. requestNumberOrigin - request number in the source system. Required when the requestNumber attribute is not informed. Output Attributes Object of class CtOcurrence containing: number - event number in 4biz. numberOrigin - occurrence number in the source system. description - occurrence description. date - date of record of occurrence. Hour - time to record the occurrence in the format HH: MM. userID - identification of the user responsible for recording the occurrence. origin - origin of occurrence. Possible values: EMAIL, FONE_FAX, VOICE_MAIL, PERSONALLY, OTHERS. category - category of occurrence. Possible Values: Creation, Monitoring, Update, Diagnosis, Investigation, Memo, Information, Return, Symptom, Outline, Executing, Exchanging, Reclaiming, Reclassification, Schedule, Suspend, Reopen, Targeting, Sharing, Cancellation Task, HomeSLA, SuspendedSLA, Approval, ReactivationSLA elapsedTime - elapsed time (for Category of Executing type) reason \u2013 reason for occurrence. task - the task associated with the occurrence, containing: number - task number. name - name of the task. startDateTime - start date and time. endDateTime - date and time of execution. status - status of the task, containing: code - location code. name - name of the situation. userId - login of the user responsible for the execution of the task. JSON Example { \"requestNumberOrigin\" : \"9999\" } Listing tickets to be attended \u00b6 This webservice should be used to list the users who can be requesters when opening a ticket. Prerequisites: The requester must be linked to a group that is allowed to create in a workflow. Listing requests/incidents to be attended URL /services/request/createOccurrence /webmvc/servicerequestincident/searchTickets Possible return codes 200 \u2013 Request was successful 401 - Invalid authentication token or user without access to the resource 406 - Not Acceptable - Business Exception Input attributes sessionID: Mandatory attribute that receives the session code; name: Non-mandatory attribute that receives the name of the requester, part of the name; If the user gives the %%% information, the system will return all requesters in the system. \u2022 userId: Mandatory attribute that receives the logged user code; \u2022 selectedPage: Mandatory attribute that passes the page to be returned; \u2022 Put the sessionID in the Header; \u2022 Filters allowed in this webservice. The attributes described below are not mandatory: o attendantId: Attribute that allows filtering by the name of the attendant; o groupId: Attribute that allows filtering by group name; o orderBy: Attribute that allows ordering the records by the following parameters: \uf0a7 TICKET_ID: Ticket number, \uf0a7 CREATE_DATE: Creation date, \uf0a7 LIMIT_DATE: Deadline for attending the ticket, o orderDirection: Attribute that allows directing tickets in two ways: \uf0a7 ASC: Directs by the number of the ticket in an ascending way, \uf0a7 DESC: Directs by the number of the ticket in a descending way o requesterId: Attribute that allows filtering by the name of the requester; o status: Attribute that allows filtering by ticket status: \uf0a7 IN_PROGRESS, \uf0a7 SUSPENDED, \uf0a7 CANCELED, \uf0a7 SOLVED, \uf0a7 CLOSED o ticketId: Attribute that allows filtering by ticket number; o unitId: Attribute that allows filtering by unit name; Example of inputs in the webservice { \"userId\": 4, \"selectedPage\": 1 } Example of a webservice input with non-mandatory attributes { \"userId\": 4, \"selectedPage\": 1, \"attendantId\": 0, \"groupId\": 0, \"orderBy\": \"TICKET_ID\", \"orderDirection\": \"ASC\", \"requesterId\": 0, \"selectedPage\": 0, \"status\": \"IN_PROGRESS\", \"ticketId\": 0, \"unitId\": 0 } ```tab=\"JSON Example\" { \"sessionID\": \"39738a39-836d-4940-94d5-c9235035bb29\", \"name\" : \"poll\" } Example of webservice input with non-mandatory attributes { \"userId\": 4, \"selectedPage\": 1, \"attendantId\": 0, \"groupId\": 0, \"orderBy\": \"TICKET_ID\", \"orderDirection\": \"ASC\", \"requesterId\": 0, \"selectedPage\": 0, \"status\": \"IN_PROGRESS\", \"ticketId\": 0, \"unitId\": 0 } Output attributes \" id \" \u2013 Response that returns the requester code found by the search; \u201cname\u201d - Response that returns the requester's name; \"email\" \u2013 Response that returns the requester's email address; \u201cUnit\u201d \u2013 Response that returns Id: Unit code; Name: Unit name; \u201cplaces\u201d \u2013 Response that returns: Id: Location code; Name: Location name; \u201cphone\u201d \u2013 Response that returns the requester's phone number; \u2022 \"id\" \u2013 Response that returns the ticket number; \u2022 \u201ctipo\u201d - Response that returns the type of demand, that is, if it is a Request (R), Incident (I) or Procedure (P); \u2022 \"nomePrioridade\" \u2013 Response that returns the Priority name given to the ticket; \u2022 \u201csolicitacao\u201d \u2013 Response that returns the description of the requested activity; \u2022 \u201ctarefa\u201d \u2013 Response that returns the task of the flow that is the ticket; \u2022 \u201cstatus\u201d \u2013 Response that returns the status of the listed ticket task; \u2022 \u201cdataLimite\u201d \u2013 Response that returns the service request closing date and time according to the SLA and calendar linked to the activityxcontract \u2022 \u201cstatusFluxoNome\u201d - Response that returns the status of the SLA, which can be: Normal, To be expired, Expired, Suspended. Example of valid response of the webservice \"code\": \"200\", \"message\": \"Request processed successfully\", \"payload\":{ \"initialNumber\": 1, \"lastPage\": 1.0, \"finalNumber\": 20, \"totalRequests\": 168, \"result\": [ \"id\": 1251, \"tipo\": \"Incident\", \"nomePrioridade\": \"Medium\", \"solicitacao\": \"Incident\", \"tarefa\": \"Attend request\", \"status\": \"NORMAL\", \"dataLimite\": \"2020-06-09 09:18:00 AM UTC\" ] } JSON Example { \"status\": \"SUCCESS\", \"code\": \"200\", \"message\": \"Request processed successfully\", \"payload\": [ { \"id\": 904, \"name\": \"Lucas Novais\", \"email\": \"lucas@rogalabs.com\", \"unit\": { \"id\": 1, \"name\": \"Default\", \"places\": [ { \"id\": 1, \"name\": \"Brasilia\" } ] }, \"phone\": \"(676) 76868-7687\" } ] } Saving ticket in progress \u00b6 This webservice should be used to return tickets to the be attended by the analysts. - Prerequests: Have access to the system and permission of execution in the workflow. ```tab=\"URL\" To only save the ticket: webmvc/servicerequestincident/save To save and advance the ticket: webmvc/servicerequestincident/next ``` ```tab=\"Possible return codes\" 200 \u2013 Request was successful 401 - Invalid authentication token or user without access to the resource 406 - Not Acceptable - Business Exception ``` ```tab=\"Input attributes\" authentication-token: Mandatory attribute that receives the authentication token Put the authentication-token in the Header; serviceRequestId: Mandatory attribute that receives the ticket number; taskId: Mandatory attribute that receives the ticket task number; contactEmail: Mandatory attribute that receives the requester's email address; contactExtension: Non-mandatory attribute that receives the requester's phone extension number; contactPhone: Non-mandatory attribute that receives the requester's phone number; goupId: Non-mandatory attribute that receives the group code number that can receive the ticket; statusId: Mandatory attribute that receives the status code number that the ticket will receive after recording the ticket. The status are: In progress (1), Canceled (3) or Resolved (4) originId: Non-mandatory attribute that receives the source code number that the ticket will receive after recording the ticket; causeId: Non-mandatory attribute that receives the solution cause code number that the ticket will receive after recording the ticket; idSolutionCategory: Non-mandatory attribute that receives the solution category code number that the ticket will receive after recording the ticket; response: Non-mandatory attribute that receives the description of the response solution that the ticket will receive after recording the ticket; builderObjects: Non-mandatory attribute that receives the captured responses if the ticket has a form; quiz: Non-mandatory attribute that receives the captured responses if the ticket has a questionnaire; flowAction: Attribute that receives the user action designed in the flow and answered by the attendant to solve the ticket; reasonFlowAction: Attribute that receives the answer given to the Reason field, when it is designed in the flow as mandatory; Example of input in the webservice: { \"serviceRequestId\": 5409, \"taskId\": 8342, \"contactEmail\": \"test@test.com\", \"contactExtension\": \"4979\", \"contactPhone\": \"(64)999177012\", \"goupId\": 21, \"statusId\": 1, \"originId\": 59, \"causeId\": 7, \"idSolutionCategory\": 13, \"response\": \"Recording test via webservice\", } ``` ```tab=\"Output attribut\" \" idGrupoAtual \" \u2013 Response that returns the current ticket group code; \u201cidTarefa\u201d - Response that returns the ticket task code; \" idStatus\" \u2013 Response that returns the current ticket status code; \u201cstatus\u201d \u2013 Response that returns the ticket status description; \u201cdataHoraInicio\u201d \u2013 Response that returns the date and time the ticket was created; \u201cdataHoraInicioSLA\u201d \u2013 Response that returns the ticket SLA start date and time; \u201cdataHoraLimite\u201d \u2013 Response that returns the closing date and time of the ticket SLA; \u201cdataHoraSolicitacao\u201d - Response that returns the date and time the ticket was created; Descri\u00e7\u00e3o: Response that returns the ticket description; idCategoriaSolucao: Response that returns the ticket solution category code; idCausaIncidente: Response that returns the ticket solution cause code; idContrato: Response that returns the ticket contract code; idServico: Response that returns the business service code or ticket support; idSolicitacaoServico: Response that returns the ticket number; idSolicitante: Response that returns the ticket requester code; idUnidade: Response that returns the ticket unit code, impacto: Response that returns the acronym of the impact; resposta: Response that returns from the words of the answer solution; siglaGrupo: Response that returns the group's acronym; tarefa: Response that returns the task description; urgencia: Response that returns the urgency of the ticket; idUsuarioResponsavelAtual: Response that returns the code of the person responsible for the ticket; nomeGrupoAtual: Response that returns the description of the current ticket group; solicitanteVip: Response that returns whether the applicant is a VIP or not. Possible responses: false ou true ``` ```tab=\"JSON Example\" { \"status\": \"SUCCESS\", \"code\": \"200\", \"message\": \"Request processed successfully\", \"payload\": { \"idGrupoAtual\": 171, \"idTarefa\": 8809, \"idStatus\": 1, \"status\": \"In Progress\", \"dataHoraInicio\": \"2020-09-10 11:58:28 AM BRT\", \"dataHoraInicioSLA\": \"2020-09-10 11:58:29 AM BRT\", \"dataHoraLimite\": \"2020-09-10 17:08:00 PM BRT\", \"dataHoraSolicitacao\": \"2020-09-10 11:58:28 AM BRT\", \"descricao\": \"<div>test</div>\", \"idCategoriaSolucao\": 13, \"idCausaIncidente\": 7, \"idContrato\": 52, \"idServico\": 670, \"idSolicitacaoServico\": 5712, \"idSolicitante\": 456, \"idUnidade\": 2, \"impacto\": \"A\", \"resposta\": \"Recording test via webservice\", \"siglaGrupo\": \"LEVEL1\", \"tarefa\": \"Answer Ticket\", \"urgencia\": \"A\", \"idUsuarioResponsavelAtual\": 254, \"nomeGrupoAtual\": \"Level 1\", \"solicitanteVip\": false } } ``` Receive Units \u00b6 This webservice must be used to return the existing active units in the system for selection when creating a ticket. Preconditions: This webservice changes results if parameter 61 - Link contracts to the unit (Eg.: Y or N) is active. Receive Units URL webmvc/ v1/unit Method: GET Possible return codes 200 \u2013 Successful request 401 - Invalid authentication token or user without access to the resource 404 \u2013 Justification not found Input Attributes \u2022 authentication-token: Mandatory attribute that receives the authentication token o Pass the authentication-token on the Header; \u2022 employeeId: Mandatory attribute that receives the user code requesting the ticket: o Pass the attribute as a parameter; \u2022 Limit: Attribute that returns the number of units to be returned in the search; o Pass the attribute as a parameter; \u2022 unitQuery: Non-mandatory attribute that allows searching by part of the name; o Pass the attribute as a parameter; Example of webservice input { It doesn't apply since the URL will pass all necessary attributes } Output Attributes \u2022 id: Returns the unit code; \u2022 name: Returns the unit description; Example of webservice output { \"status\": \"SUCCESS\", \"code\": \"200\", \"message\": \"Request processed successfully\", \"payload\": [ { \"id\": 52, \"name\": \"---Human Resourcer\" } ] } Receive justification for suspension \u00b6 This webservice must be used to return the justification for suspension registered and active in the system. Preconditions: The user who is passed on the webservice must have permission to suspend in the workflow. !!! example \" Receive justification for suspension\" URL webmvc/v1/ticket/justification Method: GET Possible return codes 200 \u2013 Successful request 401 - Invalid authentication token or user without access to the resource 404 \u2013 Justification not found ```tab=\"Input Attributes\" \u2022 authentication-token: Mandatory attribute that receives the authentication token o Put the authentication-token on the Header; \u2022 type: Mandatory attribute that receives one of the acronyms below: o Put the type as parameter; o Type (S = Suspension, A = Approval) Available values : S, A Default value : S Example of webservice input { It doesn't apply since the URL will give all necessary attributes } ``` ```tab=\"Output Attributes\" \u2022 id: Returns the code of Justification for suspension; \u2022 description: Returns the description of the Justification for suspension Example of webservice output { \"status\": \"SUCCESS\", \"code\": \"200\", \"message\": \"Request processed successfully\", \"payload\": [ { \"id\": 1, \"description\": \"Default\" } ] } ``` List tickets to be attended \u00b6 This webservice must be used to return the options allowed in the flow in a given group. Preconditions: The user who is passed on the webservice must have access to the system. The user who is passed on the webservice must have permission in the workflow. List tickets to be attended URL /webmvc/v1/ticket/{ticketId}/permissions Method: GET Possible return codes 200 \u2013 Successful request 401 - Invalid authentication token or user without access to the resource 404 \u2013 Ticket not found Input Attributes \u2022 authentication-token: Mandatory attribute that receives the authentication token o Put the authentication-token on the Header; \u2022 taskId: Mandatory attribute that receives the ticket task number; o Put the taskId as parameter in the url; \u2022 ticketId: Mandatory attribute that receives the ticket number; Example of webservice input { It doesn't apply since the URL will give all necessary attributes } Output Attributes \u2022 \"id\" \u2013 Response that returns the ticket number; \u2022 \u201ctype\u201d - Response that returns the type of demand, that is, if it's a Request (R), Incident (I) or Procedure (P); \u2022 \"namePriority\" \u2013 Response that returns the Priority name given to the ticket; \u2022 \u201crequest\u201d \u2013 Response that returns the description of the requested activity; \u2022 \u201ctask\u201d \u2013 Response that returns the task of the flow that is the ticket; \u2022 \u201cstatus\u201d \u2013 Response that returns the status of the listed ticket task; \u2022 \u201cdataLimite\u201d \u2013 Response that returns the service request closing date and time according to the SLA and calendar linked to the activityxcontract \u2022 \u201cstatusFlowName\u201d - Response that returns the status of the SLA, which can be: Normal, To Be Expired, Expired, Suspended. Example of a valid webservice response \"code\": \"200\", \"message\": \"Request processed successfully\", \"payload\":{ \"initialNumber\": 1, \"lastPage\": 1.0, \"finalNumber\": 20, \"totalRequests\": 168, \"result\": [ \"id\": 1251, \"type\": \"Incident\", \"namePriority\": \"Medium\", \"request\": \"Service of Incident\", \"task\": \"Attend request\", \"status\": \"NORMAL\", \"dataLimite\": \"2020-06-09 09:18:00 AM UTC\" ] } Receive user actions on a ticket \u00b6 This webservice must be used to return user actions designed in a workflow. Preconditions: The user who is passed on the webservice must have access to the system. The user who is passed on the webservice must have permission to run in the workflow. Receive user actions on a ticket ```tab=\"URL\" webmvc/v1/ticket/{ticketId}/flow-actions Method: GET Possible return codes 200 \u2013 Successful request 401 - Invalid authentication token or user without access to the resource 404 \u2013 Ticket not found Post condition: To send the selected response in the user action, use the Save and Advance webservice (webmvc/servicerequestincident/next) Attributes: \"flowAction\": \"reasonFlowAction\": ```tab=\"Input Attributes\" \u2022 authentication-token: Mandatory attribute that receives the authentication token o Put the authentication-token on the Header; \u2022 taskId: Mandatory attribute that receives the ticket task number; o Put the taskId as a parameter in the url; \u2022 ticketId: Mandatory attribute that receives the ticket number; Example of webservice input { It doesn't apply since the URL will pass all necessary attributes } ```tab=\"Output Attributes\" \u2022 \"id: Flow action code registered in the flow design; \u2022 Name: Flow action name; \u2022 Description: Description of the flow action; \u2022 requiresReason: Inform whether the reason is mandatory, there are two responses to this attribute: o True: When the reason is mandatory; o False: When the reason is not mandatory; \u2022 approvalActionId: Returns the approval response code; \u2022 ticketStatusId: Returns the ticket status code; { \"status\": \"SUCCESS\", \"code\": \"200\", \"message\": \"Request processed successfully\", \"payload\": [ { \"id\": 1302, \"name\": \"ApproveTicket\", \"description\": \"Approve Ticket\", \"requiresReason\": false, \"approvalActionId\": 1, \"ticketStatusId\": 1 }, { \"id\": 1304, \"name\": \"DenyTicket\", \"description\": \"Deny Ticket\", \"requiresReason\": false, \"approvalActionId\": 2, \"ticketStatusId\": 3 } ] } ``` List ticket attachments \u00b6 This webservice must be used to return the list of attachments of a ticket to be assisted by the analysts. Preconditions: The user who is passed on the webservice must have access to the system. Note: This document contains all the necessary webservices for an attachment that includes: - List attachments of a ticket; - Download the attachment; - Attach document to the ticket (upload); - Delete attachment of a ticket List tickets attachment URL /webmvc/servicerequestincident/{serviceRequestIncidentId}/attachments Method type: GET Possible return codes 200 \u2013 Successful request 401 - Invalid authentication token or user without access to the resource 404 - Ticket not found Input Attributes \u2022 authentication-token: Attribute that receives the application access token: o The token must be put in the header; \u2022 serviceRequestIncidentId: Mandatory attribute that receives the ticket number; o The ticket number must be passed in the path, next to the URL; Example of webservice input { Not applicable, note that the input attributes are in the header and in the Path of the url. } Output Attributes \u2022 \"id\" \u2013 Response that returns the attachment code contained in the ticket; \u2022 \u201cname\u201d - Response that returns the attachment description; \u2022 \"extension\" \u2013 Response that returns the attachment extension; Example of a valid webservice response { \"status\": \"SUCCESS\", \"code\": \"200\", \"message\": \"Request processed successfully\", \"payload\": [ { \"id\": 2253, \"name\": \"ei_1598697802049.png.png\", \"extension\": \"png\" }, { \"id\": 2252, \"name\": \"ei_1598697788434.jpg.jpg\", \"extension\": \"jpg\" }, { \"id\": 2251, \"name\": \"ei_1598697777801.jpg.jpg\", \"extension\": \"jpg\" } ] } Download ticket attachments \u00b6 Download ticket attachments URL webmvc/servicerequestincident/{serviceRequestIncidentId}/attachments/{documentId} Method type: GET Possible return codes 200 \u2013 Successful request 401 - Invalid authentication token or user without access to the resource 404 - Document or ticket not found Input Attributes \u2022 authentication-token: Attribute that receives the application access token: o The token must be passed in the header; \u2022 serviceRequestIncidentId: Mandatory attribute that receives the ticket number; o The ticket number must be passed in the path, next to the URL; \u2022 documentId: Mandatory attribute that receives the attachment code contained in the ticket; o The attachment id must be passed in the path, next to the URL; Example of webservice input { Not applicable, note that the input attributes are in the header and in the Path of the url. } Output Attributes The attachment itself Example of a valid webservice response { Not applicable } Upload ticket attachments \u00b6 Upload ticket attachments URL /webmvc/services/request/addAttachments Method type: POST Preconditions: 1. Check the parameters: 2. 44 - Upload directory repository path (Eg.: Windows - C:/temp) 3. 278 - Maximum file size, in bytes, to upload. Default[1073741824] = 1GB 4. 318 - List of file extensions that cannot be attached (For more than one extension, separate with a semicolon) 5. 446 - Send attachments in the Ticket notification email? (Eg.: Y or N - Default: 'N') Possible return codes 200 \u2013 Successful request 500 \u2013 Mandatory fields not informed Input Attributes \u2022 mediaType: Mandatory attribute indicating the conversation format o Important to let it fixed in application/json \u2022 requestNumber: Mandatory attribute that receives the request number that will receive the attachment; \u2022 attachments: List of file; \u2022 name: Mandatory attribute that receives the file name; \u2022 content: Mandatory attribute that must be encoded in base64 that receives the contents of the file; o The content is the content of the base64 encoded file; \u2022 extension: Mandatory attribute that receives the file extension: txt, jpg, jpeg, Example of webservice input { \"sessionID\": \"b7f24d64-5e23-4331-ab89-63403cb00d40\", \"mediaType\": \"application/json\", \"requestNumber\": \"1351\", \"attachments\": [{ \"name\": \"test file\", \"content\": \"VGVzdGU=\", \"extension\": \"txt\" }] } Output Attributes \u2022 dateTime: Mandatory attribute indicating date and time of execution; \u2022 dateTimeMilliseconds: Hour in milliseconds; \u2022 operationID: Number of the operation that was performed; \u2022 error: Mandatory attribute that indicates if there was an error while running the webservice; Example of a valid webservice response { \"dateTime\": \"2020-05-19 14:56:00\", \"dateTimeMilliseconds\": 1589910960717, \"operationID\": 603, \"error\": null } Delete ticket attachments \u00b6 Delete ticket attachments URL /webmvc/v1/ticket/{ticketId}/attachments/{documentId} Methode type: DELETE Possible return codes 200 \u2013 Successful request 401 - Invalid authentication token or user without access to the resource 404 - Ticket not found Input Attributes \u2022 authentication-token: Attribute that receives the application access token: o The token must be passed in the header; \u2022 serviceRequestIncidentId: Mandatory attribute that receives the ticket number; o The ticket number must be passed in the path, next to the URL; \u2022 documentId: Mandatory attribute that receives the attachment code contained in the ticket; o The attachment id must be passed in the path, next to the URL; Example of webservice input { Not applicable, note that the input attributes are in the header and in the Path of the url. } Output Attributes { Not applicable } Example of a valid webservice response { \"status\": \"SUCCESS\", \"code\": \"200\", } Atualiza\u00e7\u00e3o: 09/16/2018","title":"Webservices for use on 4biz"},{"location":"webservice/webservices-esp.html#webservices-for-use-on-4biz","text":"This document is intended to provide guidance regarding the Web Services made available for integration with 4biz Service Management. Web Services have been created in 4biz for inclusion, updating, consultation and cancellation of service requests (incidents and requisitions).","title":"Webservices for use on 4biz"},{"location":"webservice/webservices-esp.html#before-getting-started","text":"Before any 4biz REST operation is used, the user must be authenticated. Authentication is done through the REST login operation in the URL /services/login , which receives a CtLogin object containing the userName , password , and platform attributes. The platform attribute must contain the ID of the site that is requesting the service. The login operation returns an alphanumeric value in the SessionID attribute. This same SessionID must be used in the other REST calls. The returned object contains the code and description of the error in case of problems in executing the login operation. The authenticated user composes the key for data synchronization, when the synchronize attribute is set to true . Request inclusion and update services rely on the synchronize attribute. When this attribute is true , the user registration and catalog services are automatically created or updated in 4biz from the information sent in the Web Service request. RULE All REST services created in 4biz receive an input object and return an object. In case of error, the return object contains the code and description of the error. When there is no error, in addition to the attributes defined for each service, the return object contains the date and time of execution and the id of the operation. 4biz ensures that every request is recorded in its database and an operation ID is returned to the requester, even in case of error.","title":"Before getting started"},{"location":"webservice/webservices-esp.html#actions","text":"","title":"Actions"},{"location":"webservice/webservices-esp.html#create-a-ticket","text":"Creating a Request /Incident URL /services/request/create Input Attributes -synchronize - indicates whether the user and / or service information will be synchronized. -sourceRequest - request information from the CtRequest class, containing: -numberOrigin - the request number in the source system (mandatory. This attribute is required for 4biz to keep FROM-TO between its database and the original source system number. -type - request type (required). Possible values: I = Incident or R = Request. -description - description of the incident or request (required). -userID - applicant's user ID (required). It will be included if it does not exist in the 4biz database and the synchronize attribute is equal to true. -contact - data of the applicant. Required when the requestor does not exist in 4biz and the synchronize attribute is equal to true). -name - applicant name (required). -phoneNumber - applicant's phone number (required). -e-mail - applicant's e-mail (required). -contractID - contract number in 4biz (optional). If not informed, 4biz will include the request linked to the default contract parameterized in the service. -service - service data (optional). If not informed, 4biz will include the request linked to the default service parameterized in the WebService registry. -code - service code. Optional, if service name is given). -name - service Name. Required when the service does not exist in 4biz and the synchronize attribute is true. -category - category of service. Required when the service does not exist in 4biz and the synchronize attribute is true. -code - category code. -name - category name. -urgency - urgency of the request (optional). Possible values: H = High, M = Average, L = Low. If not informed, the urgency will be calculated from the 4biz service catalog parameters. -impact of request (optional). Possible values: H = High, M = Medium, L = Low. If not informed, the impact will be calculated from the 4biz service catalog parameters. -groupId - execution group acronym in 4biz (optional). If not informed, the executor group will be obtained from the 4biz service catalog parameters. Output Attributes Output Attributes are composed of all Input Attributes of the CtRequest class plus the following information: number - number of the request created in 4biz. startSLA - SLA start date and time. endSLA - SLA end date and time. status - status of the request, containing: code - code of the situation. name - name of the situation. currentTask - current task, containing: number - task number name - name of the task. startDateTime - start date and time status - task status, containing: code: code of the situation. name: name of the situation. userId - login of the user responsible for the task. groupId - acronym of the group responsible for the task. JSON Example { \"Synchronize\" : true , \"sourceRequest\" : { \"numberOrigin\" : \"9999\" , \"type\" : \"R\" , \"userID\" : \" 61 84460708 \" , \" email \" : \" fulano.de.tal@centralit.com.br \" , \" department \" : \" Department of the So-and-so \" , \" name \" : \" So-and-so \" }, \" description \" : \" REST v3 \" , \" service \" : { \" name \" : \" SERVICE.TEST.1 \" , \" category \" : { \" name \" : \" Category 1 \" }}, \" contractID \" : \" 1 \" , \" urgency \" : \"H\" , \"impact\" : \"H\" } } Assuming that the platform attribute in the login was informed by user and considering the synchronize attribute equal to true , the 4 biz will: - Check if there is an FROM-TO of contract 1 for the \"user\" ; - Include the applicant in the user registry, if it does not exist in the database; - Include the service in the service catalog of contract 1 , if it does not exist in the database and register the service FROM-TO for the client; - Include request with source number 9999 ; - Register the DEPUT from the 9999 source request to the client.","title":"Create a Ticket"},{"location":"webservice/webservices-esp.html#change-ticket-information","text":"Changing Information from Requests/Incidents URL /services/request/create Input Attributes \u200b\u200bsynchronize - indicates whether the user and / or service information will be synchronized. request - request information from the CtRequest class, containing: numberOrigin - the request number on the source system. Required when the number attribute is not entered. description - description of the incident or request (optional). userID - applicant's user ID (required). It will be included if it does not exist in the 4biz database and the synchronize attribute is equal to true. number - request number in 4biz (required). contact - data of the applicant. Required when the requestor does not exist in 4biz and the synchronize attribute is equal to true). name - applicant name (required). phoneNumber - applicant's phone number (required). e-mail - applicant's e-mail (required)). \u200b service - service data (optional). code - service code. Optional, if service name is given). name - service Name. Required when the service does not exist in 4biz and the synchronize attribute is true. category -category of service. Required when the service does not exist in 4biz and the synchronize attribute is true. Code - category code. Name - category name. Urgency - urgency of the request (optional). Possible values: H = High, M = Average, L = Low. If not informed, the urgency will be calculated from the 4biz service catalog parameters. Impact of request (optional). Possible values: H = High, M = Medium, L = Low. If not informed, the impact will be calculated from the 4biz service catalog parameters. Output Attributes Same as the Input JSON Example { \"Synchronize\" : true , \"request\" : { \"numberOrigin\" : \"9999\" , \"userID\" : \"ciclano.de.tal\" , \"contact\" : { \"phoneNumber\" : \"61 84460709\" , \"email\" \"Cyclone\" , \"name\" : \"Cyclone of such\" }, \"description\" : \"Inclusion of request using REST v3 - Changed\" , \"cyclano.de.tal@centralit.com.br\" , \"department\" \"Service\" : { \"name\" : \"SERVICO.TESTE.2\" , \"category\" : { \"name\" : \"Category 2\" }}}} Assuming that the platform attribute in the login was informed by \"user\" and considering the synchronize attribute equal to true , the 4 biz will: Include the applicant in the user registry, if it does not exist in the database; Include the service in the service catalog of contract 1 , if it does not exist in the database and register the service FROM-TO for the client; Change the requestor and service from the request with source number 9999 .","title":"Change ticket information"},{"location":"webservice/webservices-esp.html#change-ticket-status","text":"Changing the Status of an Incidents/Requests URL /services/request/updateStatus Input Attributes \u200b\u200bnumber - request number in 4biz. Required when the numberOrigin attribute is not informed. numberOrigin - the request number on the source system. Required when the number attribute is not entered. status - status of the request, containing: code - situation code (required). Possible values: On End, Suspended, Canceled, Resolved, Reopened, Closed. details - complement of justification to change the situation (optional). Output Attributes Same as the Input JSON Example { \"numberOrigin\" : \"9999\" , \"status\" : { \"code\" : \"Suspended\" , \"details\" : \"Integration Testing\" }}","title":"Change ticket status"},{"location":"webservice/webservices-esp.html#inquire-the-applicants-incidents-and-requests","text":"Inquire the applicant's Incidents and Requests URL /services/request/getByUser Input Attributes userID - applicant's user ID (required). description - description of the incident or request (optional). startDate - start date of the request (optional). endDate - end date of the request (optional). service - service data (optional). code - service code. name - name of the service. contractID - contract number in 4biz (optional). status - request status (optional), containing: code - Location code. Possible values: Ending, Suspended, Canceled, Resolved, Reopened, Closed, Reclassified. Output Attributes Collection of objects of class CtRequest containing: number - request number in 4biz. numberOrigin - the request number on the source system. type - type of request. Possible values: I = Incident or R = Request description - description of the incident or request. userID - user ID of the requester. urgency - urgency of the request (optional). Possible values: H = High, M = Average, L = Low. If not informed, the urgency will be calculated from the 4biz service catalog parameters. impact of request (optional). Possible values: H = High, M = Medium, L = Low. If not informed, the impact will be calculated from the 4biz service catalog parameters. groupId - execution group acronym in 4biz (optional). If not informed, the executor group will be obtained from the 4biz service catalog parameters. startDateTime - the start date and time of the request. startSLA - SLA start date and time. endSLA - end date and time of the SLA. status - status of the request, containing: code - code of the situation. name -name of the situation. JSON Example { \"userID\" : \"john elliot \" , \"startDate\" : \"2015-09-16T03:00:00.000Z\" , \"endDate\" : \"2015-09-19T03:00:00.000Z\" }","title":"INQUIRE THE APPLICANT's INCIDENTS AND REQUESTS"},{"location":"webservice/webservices-esp.html#datails-of-ticket-applicant","text":"Details of The Request/Incident URL /services/request/getById Input Attributes number - request number in 4biz. Required when the numberOrigin attribute is not informed. numberOrigin - request number in the source system. Required when the number attribute is not entered. Output Attributes Output Attributes are composed of all Input Attributes of the CtRequest class plus the following information: number - number of the request created in 4biz. startSLA - SLA start date and time. endSLA - SLA end date and time. status - status of the request, containing: code - code of the situation. name - name of the situation. currentTask - current task, containing: number - task number name - name of the task. startDateTime - start date and time status - task status, containing: code: code of the situation. name: name of the situation. userId - login of the user responsible for the task. groupId - acronym of the group responsible for the task. JSON Example { \"numberOrigin\" : \"9999\" }","title":"Datails of ticket applicant"},{"location":"webservice/webservices-esp.html#include-occurrence-in-ticket","text":"Include an occourrence on a Request URL /services/request/createOccurrence Input Attributes requestNumber - request number in 4biz. Required when the requestNumberOrigin attribute is not informed. requestNumberOrigin - request number in the source system. Required when the requestNumber attribute is not informed. ocurrence - object of class CtOccurrence, containing: numberOrigin - occurrence number in the source system (optional). description - occurrence description. date - date of record of occurrence. hour - time to record the occurrence in the format HH: MM. category - category of occurrence. Possible values: Monitoring, Update, Diagnostics, Investigation, Memo, Information, Return, Symptom, Outline, Scheduling. reason - reason for occurrence. Output Attributes Object of class CtOcurrence containing: number - event number in 4biz. numberOrigin - occurrence number in the source system. description - occurrence description. date - date of record of occurrence. Hour - time to record the occurrence in the format HH: MM. userID - identification of the user responsible for recording the occurrence. origin - origin of occurrence. Possible values: EMAIL, FONE_FAX, VOICE_MAIL, PERSONALLY, OTHERS. category - category of occurrence. Possible Values: Creation, Monitoring, Update, Diagnosis, Investigation, Memo, Information, Return, Symptom, Outline, Executing, Exchanging, Reclaiming, Reclassification, Schedule, Suspend, Reopen, Targeting, Sharing, Cancellation Task, HomeSLA, SuspendedSLA, Approval, ReactivationSLA elapsedTime - elapsed time (for Category of Executing type) reason \u2013 reason for occurrence. task - the task associated with the occurrence, containing: number - task number. name - name of the task. startDateTime - start date and time. endDateTime - date and time of execution. status - status of the task, containing: code - location code. name - name of the situation. userId - login of the user responsible for the execution of the task. JSON Example { \"requestNumberOrigin\" : \"9999\" , \"occurrence\" : { \"description\" : \"Occurrence test\" , \"category\" : { \"code\" : \"Workaround solution\" }, \"date\" : \"2015-08-20T03:00:00.000Z\" , \"hour\" : \"2219\" }}","title":"Include occurrence in ticket"},{"location":"webservice/webservices-esp.html#query-ticket-occurences","text":"Querying Information from Requests/Incidents URL /services/request/listOccurrences Input Attributes requestNumber - request number in 4biz. Required when the requestNumberOrigin attribute is not informed. requestNumberOrigin - request number in the source system. Required when the requestNumber attribute is not informed. Output Attributes Object of class CtOcurrence containing: number - event number in 4biz. numberOrigin - occurrence number in the source system. description - occurrence description. date - date of record of occurrence. Hour - time to record the occurrence in the format HH: MM. userID - identification of the user responsible for recording the occurrence. origin - origin of occurrence. Possible values: EMAIL, FONE_FAX, VOICE_MAIL, PERSONALLY, OTHERS. category - category of occurrence. Possible Values: Creation, Monitoring, Update, Diagnosis, Investigation, Memo, Information, Return, Symptom, Outline, Executing, Exchanging, Reclaiming, Reclassification, Schedule, Suspend, Reopen, Targeting, Sharing, Cancellation Task, HomeSLA, SuspendedSLA, Approval, ReactivationSLA elapsedTime - elapsed time (for Category of Executing type) reason \u2013 reason for occurrence. task - the task associated with the occurrence, containing: number - task number. name - name of the task. startDateTime - start date and time. endDateTime - date and time of execution. status - status of the task, containing: code - location code. name - name of the situation. userId - login of the user responsible for the execution of the task. JSON Example { \"requestNumberOrigin\" : \"9999\" }","title":"Query ticket occurences"},{"location":"webservice/webservices-esp.html#listing-tickets-to-be-attended","text":"This webservice should be used to list the users who can be requesters when opening a ticket. Prerequisites: The requester must be linked to a group that is allowed to create in a workflow. Listing requests/incidents to be attended URL /services/request/createOccurrence /webmvc/servicerequestincident/searchTickets Possible return codes 200 \u2013 Request was successful 401 - Invalid authentication token or user without access to the resource 406 - Not Acceptable - Business Exception Input attributes sessionID: Mandatory attribute that receives the session code; name: Non-mandatory attribute that receives the name of the requester, part of the name; If the user gives the %%% information, the system will return all requesters in the system. \u2022 userId: Mandatory attribute that receives the logged user code; \u2022 selectedPage: Mandatory attribute that passes the page to be returned; \u2022 Put the sessionID in the Header; \u2022 Filters allowed in this webservice. The attributes described below are not mandatory: o attendantId: Attribute that allows filtering by the name of the attendant; o groupId: Attribute that allows filtering by group name; o orderBy: Attribute that allows ordering the records by the following parameters: \uf0a7 TICKET_ID: Ticket number, \uf0a7 CREATE_DATE: Creation date, \uf0a7 LIMIT_DATE: Deadline for attending the ticket, o orderDirection: Attribute that allows directing tickets in two ways: \uf0a7 ASC: Directs by the number of the ticket in an ascending way, \uf0a7 DESC: Directs by the number of the ticket in a descending way o requesterId: Attribute that allows filtering by the name of the requester; o status: Attribute that allows filtering by ticket status: \uf0a7 IN_PROGRESS, \uf0a7 SUSPENDED, \uf0a7 CANCELED, \uf0a7 SOLVED, \uf0a7 CLOSED o ticketId: Attribute that allows filtering by ticket number; o unitId: Attribute that allows filtering by unit name; Example of inputs in the webservice { \"userId\": 4, \"selectedPage\": 1 } Example of a webservice input with non-mandatory attributes { \"userId\": 4, \"selectedPage\": 1, \"attendantId\": 0, \"groupId\": 0, \"orderBy\": \"TICKET_ID\", \"orderDirection\": \"ASC\", \"requesterId\": 0, \"selectedPage\": 0, \"status\": \"IN_PROGRESS\", \"ticketId\": 0, \"unitId\": 0 } ```tab=\"JSON Example\" { \"sessionID\": \"39738a39-836d-4940-94d5-c9235035bb29\", \"name\" : \"poll\" } Example of webservice input with non-mandatory attributes { \"userId\": 4, \"selectedPage\": 1, \"attendantId\": 0, \"groupId\": 0, \"orderBy\": \"TICKET_ID\", \"orderDirection\": \"ASC\", \"requesterId\": 0, \"selectedPage\": 0, \"status\": \"IN_PROGRESS\", \"ticketId\": 0, \"unitId\": 0 } Output attributes \" id \" \u2013 Response that returns the requester code found by the search; \u201cname\u201d - Response that returns the requester's name; \"email\" \u2013 Response that returns the requester's email address; \u201cUnit\u201d \u2013 Response that returns Id: Unit code; Name: Unit name; \u201cplaces\u201d \u2013 Response that returns: Id: Location code; Name: Location name; \u201cphone\u201d \u2013 Response that returns the requester's phone number; \u2022 \"id\" \u2013 Response that returns the ticket number; \u2022 \u201ctipo\u201d - Response that returns the type of demand, that is, if it is a Request (R), Incident (I) or Procedure (P); \u2022 \"nomePrioridade\" \u2013 Response that returns the Priority name given to the ticket; \u2022 \u201csolicitacao\u201d \u2013 Response that returns the description of the requested activity; \u2022 \u201ctarefa\u201d \u2013 Response that returns the task of the flow that is the ticket; \u2022 \u201cstatus\u201d \u2013 Response that returns the status of the listed ticket task; \u2022 \u201cdataLimite\u201d \u2013 Response that returns the service request closing date and time according to the SLA and calendar linked to the activityxcontract \u2022 \u201cstatusFluxoNome\u201d - Response that returns the status of the SLA, which can be: Normal, To be expired, Expired, Suspended. Example of valid response of the webservice \"code\": \"200\", \"message\": \"Request processed successfully\", \"payload\":{ \"initialNumber\": 1, \"lastPage\": 1.0, \"finalNumber\": 20, \"totalRequests\": 168, \"result\": [ \"id\": 1251, \"tipo\": \"Incident\", \"nomePrioridade\": \"Medium\", \"solicitacao\": \"Incident\", \"tarefa\": \"Attend request\", \"status\": \"NORMAL\", \"dataLimite\": \"2020-06-09 09:18:00 AM UTC\" ] } JSON Example { \"status\": \"SUCCESS\", \"code\": \"200\", \"message\": \"Request processed successfully\", \"payload\": [ { \"id\": 904, \"name\": \"Lucas Novais\", \"email\": \"lucas@rogalabs.com\", \"unit\": { \"id\": 1, \"name\": \"Default\", \"places\": [ { \"id\": 1, \"name\": \"Brasilia\" } ] }, \"phone\": \"(676) 76868-7687\" } ] }","title":"Listing tickets to be attended"},{"location":"webservice/webservices-esp.html#saving-ticket-in-progress","text":"This webservice should be used to return tickets to the be attended by the analysts. - Prerequests: Have access to the system and permission of execution in the workflow. ```tab=\"URL\" To only save the ticket: webmvc/servicerequestincident/save To save and advance the ticket: webmvc/servicerequestincident/next ``` ```tab=\"Possible return codes\" 200 \u2013 Request was successful 401 - Invalid authentication token or user without access to the resource 406 - Not Acceptable - Business Exception ``` ```tab=\"Input attributes\" authentication-token: Mandatory attribute that receives the authentication token Put the authentication-token in the Header; serviceRequestId: Mandatory attribute that receives the ticket number; taskId: Mandatory attribute that receives the ticket task number; contactEmail: Mandatory attribute that receives the requester's email address; contactExtension: Non-mandatory attribute that receives the requester's phone extension number; contactPhone: Non-mandatory attribute that receives the requester's phone number; goupId: Non-mandatory attribute that receives the group code number that can receive the ticket; statusId: Mandatory attribute that receives the status code number that the ticket will receive after recording the ticket. The status are: In progress (1), Canceled (3) or Resolved (4) originId: Non-mandatory attribute that receives the source code number that the ticket will receive after recording the ticket; causeId: Non-mandatory attribute that receives the solution cause code number that the ticket will receive after recording the ticket; idSolutionCategory: Non-mandatory attribute that receives the solution category code number that the ticket will receive after recording the ticket; response: Non-mandatory attribute that receives the description of the response solution that the ticket will receive after recording the ticket; builderObjects: Non-mandatory attribute that receives the captured responses if the ticket has a form; quiz: Non-mandatory attribute that receives the captured responses if the ticket has a questionnaire; flowAction: Attribute that receives the user action designed in the flow and answered by the attendant to solve the ticket; reasonFlowAction: Attribute that receives the answer given to the Reason field, when it is designed in the flow as mandatory; Example of input in the webservice: { \"serviceRequestId\": 5409, \"taskId\": 8342, \"contactEmail\": \"test@test.com\", \"contactExtension\": \"4979\", \"contactPhone\": \"(64)999177012\", \"goupId\": 21, \"statusId\": 1, \"originId\": 59, \"causeId\": 7, \"idSolutionCategory\": 13, \"response\": \"Recording test via webservice\", } ``` ```tab=\"Output attribut\" \" idGrupoAtual \" \u2013 Response that returns the current ticket group code; \u201cidTarefa\u201d - Response that returns the ticket task code; \" idStatus\" \u2013 Response that returns the current ticket status code; \u201cstatus\u201d \u2013 Response that returns the ticket status description; \u201cdataHoraInicio\u201d \u2013 Response that returns the date and time the ticket was created; \u201cdataHoraInicioSLA\u201d \u2013 Response that returns the ticket SLA start date and time; \u201cdataHoraLimite\u201d \u2013 Response that returns the closing date and time of the ticket SLA; \u201cdataHoraSolicitacao\u201d - Response that returns the date and time the ticket was created; Descri\u00e7\u00e3o: Response that returns the ticket description; idCategoriaSolucao: Response that returns the ticket solution category code; idCausaIncidente: Response that returns the ticket solution cause code; idContrato: Response that returns the ticket contract code; idServico: Response that returns the business service code or ticket support; idSolicitacaoServico: Response that returns the ticket number; idSolicitante: Response that returns the ticket requester code; idUnidade: Response that returns the ticket unit code, impacto: Response that returns the acronym of the impact; resposta: Response that returns from the words of the answer solution; siglaGrupo: Response that returns the group's acronym; tarefa: Response that returns the task description; urgencia: Response that returns the urgency of the ticket; idUsuarioResponsavelAtual: Response that returns the code of the person responsible for the ticket; nomeGrupoAtual: Response that returns the description of the current ticket group; solicitanteVip: Response that returns whether the applicant is a VIP or not. Possible responses: false ou true ``` ```tab=\"JSON Example\" { \"status\": \"SUCCESS\", \"code\": \"200\", \"message\": \"Request processed successfully\", \"payload\": { \"idGrupoAtual\": 171, \"idTarefa\": 8809, \"idStatus\": 1, \"status\": \"In Progress\", \"dataHoraInicio\": \"2020-09-10 11:58:28 AM BRT\", \"dataHoraInicioSLA\": \"2020-09-10 11:58:29 AM BRT\", \"dataHoraLimite\": \"2020-09-10 17:08:00 PM BRT\", \"dataHoraSolicitacao\": \"2020-09-10 11:58:28 AM BRT\", \"descricao\": \"<div>test</div>\", \"idCategoriaSolucao\": 13, \"idCausaIncidente\": 7, \"idContrato\": 52, \"idServico\": 670, \"idSolicitacaoServico\": 5712, \"idSolicitante\": 456, \"idUnidade\": 2, \"impacto\": \"A\", \"resposta\": \"Recording test via webservice\", \"siglaGrupo\": \"LEVEL1\", \"tarefa\": \"Answer Ticket\", \"urgencia\": \"A\", \"idUsuarioResponsavelAtual\": 254, \"nomeGrupoAtual\": \"Level 1\", \"solicitanteVip\": false } } ```","title":"Saving ticket in progress"},{"location":"webservice/webservices-esp.html#receive-units","text":"This webservice must be used to return the existing active units in the system for selection when creating a ticket. Preconditions: This webservice changes results if parameter 61 - Link contracts to the unit (Eg.: Y or N) is active. Receive Units URL webmvc/ v1/unit Method: GET Possible return codes 200 \u2013 Successful request 401 - Invalid authentication token or user without access to the resource 404 \u2013 Justification not found Input Attributes \u2022 authentication-token: Mandatory attribute that receives the authentication token o Pass the authentication-token on the Header; \u2022 employeeId: Mandatory attribute that receives the user code requesting the ticket: o Pass the attribute as a parameter; \u2022 Limit: Attribute that returns the number of units to be returned in the search; o Pass the attribute as a parameter; \u2022 unitQuery: Non-mandatory attribute that allows searching by part of the name; o Pass the attribute as a parameter; Example of webservice input { It doesn't apply since the URL will pass all necessary attributes } Output Attributes \u2022 id: Returns the unit code; \u2022 name: Returns the unit description; Example of webservice output { \"status\": \"SUCCESS\", \"code\": \"200\", \"message\": \"Request processed successfully\", \"payload\": [ { \"id\": 52, \"name\": \"---Human Resourcer\" } ] }","title":"Receive Units"},{"location":"webservice/webservices-esp.html#receive-justification-for-suspension","text":"This webservice must be used to return the justification for suspension registered and active in the system. Preconditions: The user who is passed on the webservice must have permission to suspend in the workflow. !!! example \" Receive justification for suspension\" URL webmvc/v1/ticket/justification Method: GET Possible return codes 200 \u2013 Successful request 401 - Invalid authentication token or user without access to the resource 404 \u2013 Justification not found ```tab=\"Input Attributes\" \u2022 authentication-token: Mandatory attribute that receives the authentication token o Put the authentication-token on the Header; \u2022 type: Mandatory attribute that receives one of the acronyms below: o Put the type as parameter; o Type (S = Suspension, A = Approval) Available values : S, A Default value : S Example of webservice input { It doesn't apply since the URL will give all necessary attributes } ``` ```tab=\"Output Attributes\" \u2022 id: Returns the code of Justification for suspension; \u2022 description: Returns the description of the Justification for suspension Example of webservice output { \"status\": \"SUCCESS\", \"code\": \"200\", \"message\": \"Request processed successfully\", \"payload\": [ { \"id\": 1, \"description\": \"Default\" } ] } ```","title":"Receive justification for suspension"},{"location":"webservice/webservices-esp.html#list-tickets-to-be-attended","text":"This webservice must be used to return the options allowed in the flow in a given group. Preconditions: The user who is passed on the webservice must have access to the system. The user who is passed on the webservice must have permission in the workflow. List tickets to be attended URL /webmvc/v1/ticket/{ticketId}/permissions Method: GET Possible return codes 200 \u2013 Successful request 401 - Invalid authentication token or user without access to the resource 404 \u2013 Ticket not found Input Attributes \u2022 authentication-token: Mandatory attribute that receives the authentication token o Put the authentication-token on the Header; \u2022 taskId: Mandatory attribute that receives the ticket task number; o Put the taskId as parameter in the url; \u2022 ticketId: Mandatory attribute that receives the ticket number; Example of webservice input { It doesn't apply since the URL will give all necessary attributes } Output Attributes \u2022 \"id\" \u2013 Response that returns the ticket number; \u2022 \u201ctype\u201d - Response that returns the type of demand, that is, if it's a Request (R), Incident (I) or Procedure (P); \u2022 \"namePriority\" \u2013 Response that returns the Priority name given to the ticket; \u2022 \u201crequest\u201d \u2013 Response that returns the description of the requested activity; \u2022 \u201ctask\u201d \u2013 Response that returns the task of the flow that is the ticket; \u2022 \u201cstatus\u201d \u2013 Response that returns the status of the listed ticket task; \u2022 \u201cdataLimite\u201d \u2013 Response that returns the service request closing date and time according to the SLA and calendar linked to the activityxcontract \u2022 \u201cstatusFlowName\u201d - Response that returns the status of the SLA, which can be: Normal, To Be Expired, Expired, Suspended. Example of a valid webservice response \"code\": \"200\", \"message\": \"Request processed successfully\", \"payload\":{ \"initialNumber\": 1, \"lastPage\": 1.0, \"finalNumber\": 20, \"totalRequests\": 168, \"result\": [ \"id\": 1251, \"type\": \"Incident\", \"namePriority\": \"Medium\", \"request\": \"Service of Incident\", \"task\": \"Attend request\", \"status\": \"NORMAL\", \"dataLimite\": \"2020-06-09 09:18:00 AM UTC\" ] }","title":"List tickets to be attended"},{"location":"webservice/webservices-esp.html#receive-user-actions-on-a-ticket","text":"This webservice must be used to return user actions designed in a workflow. Preconditions: The user who is passed on the webservice must have access to the system. The user who is passed on the webservice must have permission to run in the workflow. Receive user actions on a ticket ```tab=\"URL\" webmvc/v1/ticket/{ticketId}/flow-actions Method: GET Possible return codes 200 \u2013 Successful request 401 - Invalid authentication token or user without access to the resource 404 \u2013 Ticket not found Post condition: To send the selected response in the user action, use the Save and Advance webservice (webmvc/servicerequestincident/next) Attributes: \"flowAction\": \"reasonFlowAction\": ```tab=\"Input Attributes\" \u2022 authentication-token: Mandatory attribute that receives the authentication token o Put the authentication-token on the Header; \u2022 taskId: Mandatory attribute that receives the ticket task number; o Put the taskId as a parameter in the url; \u2022 ticketId: Mandatory attribute that receives the ticket number; Example of webservice input { It doesn't apply since the URL will pass all necessary attributes } ```tab=\"Output Attributes\" \u2022 \"id: Flow action code registered in the flow design; \u2022 Name: Flow action name; \u2022 Description: Description of the flow action; \u2022 requiresReason: Inform whether the reason is mandatory, there are two responses to this attribute: o True: When the reason is mandatory; o False: When the reason is not mandatory; \u2022 approvalActionId: Returns the approval response code; \u2022 ticketStatusId: Returns the ticket status code; { \"status\": \"SUCCESS\", \"code\": \"200\", \"message\": \"Request processed successfully\", \"payload\": [ { \"id\": 1302, \"name\": \"ApproveTicket\", \"description\": \"Approve Ticket\", \"requiresReason\": false, \"approvalActionId\": 1, \"ticketStatusId\": 1 }, { \"id\": 1304, \"name\": \"DenyTicket\", \"description\": \"Deny Ticket\", \"requiresReason\": false, \"approvalActionId\": 2, \"ticketStatusId\": 3 } ] } ```","title":"Receive user actions on a ticket"},{"location":"webservice/webservices-esp.html#list-ticket-attachments","text":"This webservice must be used to return the list of attachments of a ticket to be assisted by the analysts. Preconditions: The user who is passed on the webservice must have access to the system. Note: This document contains all the necessary webservices for an attachment that includes: - List attachments of a ticket; - Download the attachment; - Attach document to the ticket (upload); - Delete attachment of a ticket List tickets attachment URL /webmvc/servicerequestincident/{serviceRequestIncidentId}/attachments Method type: GET Possible return codes 200 \u2013 Successful request 401 - Invalid authentication token or user without access to the resource 404 - Ticket not found Input Attributes \u2022 authentication-token: Attribute that receives the application access token: o The token must be put in the header; \u2022 serviceRequestIncidentId: Mandatory attribute that receives the ticket number; o The ticket number must be passed in the path, next to the URL; Example of webservice input { Not applicable, note that the input attributes are in the header and in the Path of the url. } Output Attributes \u2022 \"id\" \u2013 Response that returns the attachment code contained in the ticket; \u2022 \u201cname\u201d - Response that returns the attachment description; \u2022 \"extension\" \u2013 Response that returns the attachment extension; Example of a valid webservice response { \"status\": \"SUCCESS\", \"code\": \"200\", \"message\": \"Request processed successfully\", \"payload\": [ { \"id\": 2253, \"name\": \"ei_1598697802049.png.png\", \"extension\": \"png\" }, { \"id\": 2252, \"name\": \"ei_1598697788434.jpg.jpg\", \"extension\": \"jpg\" }, { \"id\": 2251, \"name\": \"ei_1598697777801.jpg.jpg\", \"extension\": \"jpg\" } ] }","title":"List ticket attachments"},{"location":"webservice/webservices-esp.html#download-ticket-attachments","text":"Download ticket attachments URL webmvc/servicerequestincident/{serviceRequestIncidentId}/attachments/{documentId} Method type: GET Possible return codes 200 \u2013 Successful request 401 - Invalid authentication token or user without access to the resource 404 - Document or ticket not found Input Attributes \u2022 authentication-token: Attribute that receives the application access token: o The token must be passed in the header; \u2022 serviceRequestIncidentId: Mandatory attribute that receives the ticket number; o The ticket number must be passed in the path, next to the URL; \u2022 documentId: Mandatory attribute that receives the attachment code contained in the ticket; o The attachment id must be passed in the path, next to the URL; Example of webservice input { Not applicable, note that the input attributes are in the header and in the Path of the url. } Output Attributes The attachment itself Example of a valid webservice response { Not applicable }","title":"Download ticket attachments"},{"location":"webservice/webservices-esp.html#upload-ticket-attachments","text":"Upload ticket attachments URL /webmvc/services/request/addAttachments Method type: POST Preconditions: 1. Check the parameters: 2. 44 - Upload directory repository path (Eg.: Windows - C:/temp) 3. 278 - Maximum file size, in bytes, to upload. Default[1073741824] = 1GB 4. 318 - List of file extensions that cannot be attached (For more than one extension, separate with a semicolon) 5. 446 - Send attachments in the Ticket notification email? (Eg.: Y or N - Default: 'N') Possible return codes 200 \u2013 Successful request 500 \u2013 Mandatory fields not informed Input Attributes \u2022 mediaType: Mandatory attribute indicating the conversation format o Important to let it fixed in application/json \u2022 requestNumber: Mandatory attribute that receives the request number that will receive the attachment; \u2022 attachments: List of file; \u2022 name: Mandatory attribute that receives the file name; \u2022 content: Mandatory attribute that must be encoded in base64 that receives the contents of the file; o The content is the content of the base64 encoded file; \u2022 extension: Mandatory attribute that receives the file extension: txt, jpg, jpeg, Example of webservice input { \"sessionID\": \"b7f24d64-5e23-4331-ab89-63403cb00d40\", \"mediaType\": \"application/json\", \"requestNumber\": \"1351\", \"attachments\": [{ \"name\": \"test file\", \"content\": \"VGVzdGU=\", \"extension\": \"txt\" }] } Output Attributes \u2022 dateTime: Mandatory attribute indicating date and time of execution; \u2022 dateTimeMilliseconds: Hour in milliseconds; \u2022 operationID: Number of the operation that was performed; \u2022 error: Mandatory attribute that indicates if there was an error while running the webservice; Example of a valid webservice response { \"dateTime\": \"2020-05-19 14:56:00\", \"dateTimeMilliseconds\": 1589910960717, \"operationID\": 603, \"error\": null }","title":"Upload ticket attachments"},{"location":"webservice/webservices-esp.html#delete-ticket-attachments","text":"Delete ticket attachments URL /webmvc/v1/ticket/{ticketId}/attachments/{documentId} Methode type: DELETE Possible return codes 200 \u2013 Successful request 401 - Invalid authentication token or user without access to the resource 404 - Ticket not found Input Attributes \u2022 authentication-token: Attribute that receives the application access token: o The token must be passed in the header; \u2022 serviceRequestIncidentId: Mandatory attribute that receives the ticket number; o The ticket number must be passed in the path, next to the URL; \u2022 documentId: Mandatory attribute that receives the attachment code contained in the ticket; o The attachment id must be passed in the path, next to the URL; Example of webservice input { Not applicable, note that the input attributes are in the header and in the Path of the url. } Output Attributes { Not applicable } Example of a valid webservice response { \"status\": \"SUCCESS\", \"code\": \"200\", } Atualiza\u00e7\u00e3o: 09/16/2018","title":"Delete ticket attachments"},{"location":"webservice/webservices-neuro.html","text":"Webservices NEURO \u00b6 This document gathers the minimum knowledge necessary for the adequate use of the services via Rest. URL Description Parameters Return /startWithMap/{name} Starts an ESI flow by name name: Name of the registered flow Representation of the registered flow object /instance/initialize/{processInstanceId} Retrieve the values of a process instance processInstanceid: ID of the process instance Representation of the registered process instance /instance/suspend/{processInstanceId} Suspends a process instance processInstanceid: ID of the process instance Representation of the registered process instance /instance/restart/{processInstanceId} Restarts a process instance processInstanceid: ID of the process instance Representation of the registered process instance /instance/reopen/{processInstanceId} Reopens a process instance processInstanceid: ID of the process instance Representation of the registered process instance /userTask/{userTaskId} Retrieves an user task userTaskId: ID of the created user task Representation of the registered process instance /rule/executeWithMap/{name} Executes a business rule name: Name of the registered business rule Representation of the executed business rule request body: JSON Object with the variables for the flow request body:JSON Object with the variables for the business rule Table 1 - Specification of APPLICATION PROGRAMMABLE INTERFACES** **(API) SPECIFIC GUIDELINES FOR REST API ACCESS \u00b6 In the following sections, each type of intended use for the services available via Rest is detailed in the 4biz Enteprise Neuro product. Authentication \u00b6 To use the APIs, the client must be logged into Neuro. To do this, simply get a token from the authentication service and inject that token into the header of each REST request with the authentication-token identifier. Authentication is done through the POST /cit-esi-web/rest/security/token service, passing a JSON object with the username and password attributes in the body. Figure 1 - Example using the Chrome Restart Client plugin Business Objects REST API \u00b6 Each business object provides a set of REST services that can be consumed from the URL /cit-esi-web/dynamic/{application name}/{business object name} . These are basic services for creating, updating, listing and deleting the business object, as well as a getStructure method that returns the metadata of the business object. Each SQL created in the business object can also be called in method form. Following are examples using the hotel business object of the hotels application. For each request, the authentication-token obtained in the login service must be provided. The url should end with \".json\". Inclusion of business object \u00b6 HTTP verb : POST URL: /cit-esi-web/rest/dynamic/{application name}/{business object name}.json Body: JSON containing the attributes of the business object record to be included Figure 2 - Inclusion of business object Business Object Change \u00b6 HTTP verb : POST URL : /cit-esi-web/rest/dynamic/{application name}/{business object name} /update.json Body : JSON containing the attributes of the business object record to be changed Figure 3 - Change of business object Business Object Deletion \u00b6 HTTP verb : POST URL : /cit-esi-web/rest/dynamic/{application name}/{business object name}/remove.json Body : JSON containing the primary key of the business object record to be deleted Figure 4 - Business Object Deletion Listing of business objects \u00b6 HTTP verb : GET URL : /cit-esi-web/rest/dynamic/{application name}/{business object name}.json Figure 5 - Listing of business objects Business object recovery by primary key \u00b6 HTTP verb : POST URL : /cit-esi-web/rest/dynamic/{application name}/{business object name}/restore.json Body : JSON containing: The primary key of the business object record to be deleted Attribute boolean findManyToOne, indicating whether the system should retrieve many relationships for one of the object Boolean findOneToMany attribute, indicating whether the system should retrieve one-to-many relationships from the object Figure 6 - Recovery of business object by primary key Retrieving the structure of the business object \u00b6 HTTP verb : GET URL : /cit-esi-web/rest/dynamic/{application name}/{business object name}/getStructure.json Figure 7 - Recovery of the structure of the business object SQL Execution of the Business Object \u00b6 HTTP verb : POST URL : / cit-esi-web / rest / dynamic / {application name} / {business object name} /list.son Body : JSON containing: SQLName attribute with the name of the SQL to be executed JSON dynamicModel attribute containing the expected parameter values in SQL Attribute boolean findManyToOne (optional), indicating whether the system should retrieve many relationships for one of the object Attribute boolean findOneToMany (optional), indicating whether the system should retrieve one-to-many relationships from the object Figure 8 - SQL execution of the business object Execution of ESI streams \u00b6 Any ESI stream can be executed via REST using the POST service /cit-esi-web/rest/esi/execute/{stream name} . For each request, the authentication-token obtained in the login service must be provided. In the body of the request a JSON containing the input variables required to execute the flow must be provided. The example below performs the job-search flow, providing the \"12345\" enrollment as the input variable of the stream. The stream returns the \"employee\" JSON object. Figure 9 - Example of running ESI streams Produto/Vers\u00e3o: 4biz | 8.00 Atualiza\u00e7\u00e3o: 12/12/2018 - Andre Luiz de Oliveira Fernandes","title":"Webservices - NEURO"},{"location":"webservice/webservices-neuro.html#webservices-neuro","text":"This document gathers the minimum knowledge necessary for the adequate use of the services via Rest. URL Description Parameters Return /startWithMap/{name} Starts an ESI flow by name name: Name of the registered flow Representation of the registered flow object /instance/initialize/{processInstanceId} Retrieve the values of a process instance processInstanceid: ID of the process instance Representation of the registered process instance /instance/suspend/{processInstanceId} Suspends a process instance processInstanceid: ID of the process instance Representation of the registered process instance /instance/restart/{processInstanceId} Restarts a process instance processInstanceid: ID of the process instance Representation of the registered process instance /instance/reopen/{processInstanceId} Reopens a process instance processInstanceid: ID of the process instance Representation of the registered process instance /userTask/{userTaskId} Retrieves an user task userTaskId: ID of the created user task Representation of the registered process instance /rule/executeWithMap/{name} Executes a business rule name: Name of the registered business rule Representation of the executed business rule request body: JSON Object with the variables for the flow request body:JSON Object with the variables for the business rule Table 1 - Specification of APPLICATION PROGRAMMABLE INTERFACES** **(API)","title":"Webservices NEURO"},{"location":"webservice/webservices-neuro.html#specific-guidelines-for-rest-api-access","text":"In the following sections, each type of intended use for the services available via Rest is detailed in the 4biz Enteprise Neuro product.","title":"SPECIFIC GUIDELINES FOR REST API ACCESS"},{"location":"webservice/webservices-neuro.html#authentication","text":"To use the APIs, the client must be logged into Neuro. To do this, simply get a token from the authentication service and inject that token into the header of each REST request with the authentication-token identifier. Authentication is done through the POST /cit-esi-web/rest/security/token service, passing a JSON object with the username and password attributes in the body. Figure 1 - Example using the Chrome Restart Client plugin","title":"Authentication"},{"location":"webservice/webservices-neuro.html#business-objects-rest-api","text":"Each business object provides a set of REST services that can be consumed from the URL /cit-esi-web/dynamic/{application name}/{business object name} . These are basic services for creating, updating, listing and deleting the business object, as well as a getStructure method that returns the metadata of the business object. Each SQL created in the business object can also be called in method form. Following are examples using the hotel business object of the hotels application. For each request, the authentication-token obtained in the login service must be provided. The url should end with \".json\".","title":"Business Objects REST API"},{"location":"webservice/webservices-neuro.html#inclusion-of-business-object","text":"HTTP verb : POST URL: /cit-esi-web/rest/dynamic/{application name}/{business object name}.json Body: JSON containing the attributes of the business object record to be included Figure 2 - Inclusion of business object","title":"Inclusion of business object"},{"location":"webservice/webservices-neuro.html#business-object-change","text":"HTTP verb : POST URL : /cit-esi-web/rest/dynamic/{application name}/{business object name} /update.json Body : JSON containing the attributes of the business object record to be changed Figure 3 - Change of business object","title":"Business Object Change"},{"location":"webservice/webservices-neuro.html#business-object-deletion","text":"HTTP verb : POST URL : /cit-esi-web/rest/dynamic/{application name}/{business object name}/remove.json Body : JSON containing the primary key of the business object record to be deleted Figure 4 - Business Object Deletion","title":"Business Object Deletion"},{"location":"webservice/webservices-neuro.html#listing-of-business-objects","text":"HTTP verb : GET URL : /cit-esi-web/rest/dynamic/{application name}/{business object name}.json Figure 5 - Listing of business objects","title":"Listing of business objects"},{"location":"webservice/webservices-neuro.html#business-object-recovery-by-primary-key","text":"HTTP verb : POST URL : /cit-esi-web/rest/dynamic/{application name}/{business object name}/restore.json Body : JSON containing: The primary key of the business object record to be deleted Attribute boolean findManyToOne, indicating whether the system should retrieve many relationships for one of the object Boolean findOneToMany attribute, indicating whether the system should retrieve one-to-many relationships from the object Figure 6 - Recovery of business object by primary key","title":"Business object recovery by primary key"},{"location":"webservice/webservices-neuro.html#retrieving-the-structure-of-the-business-object","text":"HTTP verb : GET URL : /cit-esi-web/rest/dynamic/{application name}/{business object name}/getStructure.json Figure 7 - Recovery of the structure of the business object","title":"Retrieving the structure of the business object"},{"location":"webservice/webservices-neuro.html#sql-execution-of-the-business-object","text":"HTTP verb : POST URL : / cit-esi-web / rest / dynamic / {application name} / {business object name} /list.son Body : JSON containing: SQLName attribute with the name of the SQL to be executed JSON dynamicModel attribute containing the expected parameter values in SQL Attribute boolean findManyToOne (optional), indicating whether the system should retrieve many relationships for one of the object Attribute boolean findOneToMany (optional), indicating whether the system should retrieve one-to-many relationships from the object Figure 8 - SQL execution of the business object","title":"SQL Execution of the Business Object"},{"location":"webservice/webservices-neuro.html#execution-of-esi-streams","text":"Any ESI stream can be executed via REST using the POST service /cit-esi-web/rest/esi/execute/{stream name} . For each request, the authentication-token obtained in the login service must be provided. In the body of the request a JSON containing the input variables required to execute the flow must be provided. The example below performs the job-search flow, providing the \"12345\" enrollment as the input variable of the stream. The stream returns the \"employee\" JSON object. Figure 9 - Example of running ESI streams Produto/Vers\u00e3o: 4biz | 8.00 Atualiza\u00e7\u00e3o: 12/12/2018 - Andre Luiz de Oliveira Fernandes","title":"Execution of ESI streams"},{"location":"webservice/webservices.html","text":"Webservices in 4biz \u00b6 Web Service is a solution used in systems integration and communication between different applications. With this technology it is possible that new applications can interact with those that already exist and that systems developed in different platforms are compatible. Web Services are components that allow applications to send and receive data in XML format. Each application can have its own \"language\", which is translated into a universal language, the XML format. This document describes the implementation of WebService in 4biz ESP. Called Citrest, the web service uses the RESTEasy implementation of the RESTFul standard. Through practical examples, the basic concepts, data structures, and patterns to be followed in the implementation of new services will be presented. The Standard RestEasy \u00b6 Representational State Transfer (REST) describes architectures that use the HTTP protocol or similar protocols, restricting the interface to a set of known HTTP operations: GET, POST, PUT, and DELETE. Citrest uses RESTEasy, which is an implementation of the JAX-RS specification that provides a Java API for RESTful Web Services through the HTTP protocol. This document is not intended to present details about the RESTful or RESTEasy implementation, since there is extensive documentation on the internet about the subject, such as in the site http://www.jboss.org/resteasy . Data Model \u00b6 A structure has been created in the database to store data required for Citrest to function. The rest_v2.pdm data model is located in the**CitCorporeWeb/Model **directory. All tables maintained in Citrest have the prefix Rest_ and have relationships with other tables in the 4biz model: ObjetoNegocio, Grupo, Usu\u00e1rio, and ProcessamentoBatch. Classes Resources \u00b6 The Resources classes are simple classes, POJO, containing JAX-RS annotations to indicate existing mappings and operations. The Resources classes should be in the package br.com.centralit.4biz.rest.resource and follow the naming pattern used in the other classes Resources, Rest \\<NomeDoUC> Resources.java. The resource class that intercepts the http call to the webservice must be mapped to the web.xml file. For example: Example \\<context-param> \\<param-name>resteasy-resources2\\</param-name> \\<param-value> br.com.centralit.4biz.rest.resource.RestOperationResources \u200b\\</param-value> \\</context-param> A new instance of the Resource class is created for each request to that resource. Each resource method receives as a parameter a child instance of the CtMessage.java class and returns an object of type CtMessageResp. In this instance is attributed th value of the MessageID attribute. This instance is passed as a parameter to the execute method of the RestOperationUtil.java utility class. Utility Classes \u00b6 The RestOperationUtil.java class is responsible for performing the validations and targeting of the resource request for the class responsible for the Operation. The execute method (CtMessage input) is the method called by the Resources classes and receives as parameter an instance of CtMessage with the attribute MessageID assigned. The RestOperationUtil class obtains next to class RestUtil.java an instance of each Service and performs the following verifications: Verifies whether the SessionId exists and is not expired. Returns a RestSessionDTO object associated with the SessionId. Verifies whether the operation exists in the Rest_Operation table and returns the RestOperationDTO object. Verifies whether any associated user group with the session has permission on the Rest_Permission table. Once these validations are done, the class performs the Operation Initialization, recording in the Rest_Execution table the attributes. The RestExecution table functions as a Execution Log table. Note that the execution is created with the status NotInitiated, that is, the operation has not yet been initialized. This status will be updated later according to the result of the operation execution. After performing execution logging, the RestOperationUtil class instantiates the Operation class obtained from the JavaClass attribute of the Rest_Operation table and performs the call to the execute method. The execute method is a condition of the IRestOperation Interface contract. The classes that implement this interface need to implement the execute method. For each messageID a call is made to a specific method for treatment. Each of these methods can make calls to the 4biz Services Layer for reuse of services. Specific Rules \u00b6 All classes responsible for webservice operation must be registered in the Rest_Operation table. Each operation has an associated class that obeys a standard RestOperation interface and is responsible for its execution. The class executing the operation can be of type Java or JavaScript (ClassType attribute). Currently only the Java type is supported. An operation can be synchronous or asynchronous (OperationType attribute). A synchronous operation is performed immediately when it is called. An asynchronous operation points to batch processing. Currently, only synchronous operations are supported. For a given user to be able to perform an operation, at least one user group must be associated with the operation in the Rest_Permission table. The Rest_Parameter table stores parameters that can be used to perform operations. Examples of parameters are: idrestparameter Identifier Description 1 CONTRACT_ID Contract ID 2 ORIGIN_ID Source ID 3 REQUEST_ID Demand type ID for requests 4 INCIDENT_ID Incident demand type ID 5 DEFAULT_DEPTO_ID Unit Default ID Each operation can have one or more parameter domains in the Rest_Domain table. idrestparameter idrestoperation value 1 1 1 1 6 1 2 1 7 2 6 10 3 1 1 3 6 1 4 1 3 4 6 3 5 1 3 5 6 3 Each execution of a particular operation is recorded in the Rest_Execution table. This table records the date and time of the request, the id of the user requesting the execution, the input class, the input data, and the current execution status. Each result of an execution is recorded in the Rest_Log table. This table records the execution date and time, the output class, the output data, and the execution status. For the creation of a new resource the developer must follow the following parameterization steps: Record an operation in the Rest_Operation table and tell which Java class will execute it. Give operation execution permissions to one or more groups in the Rest_Permission table. Record parameters in the Rest_Parameter table. Associate the operation parameter domains in the Rest_Domain table. Class Structure \u00b6 All classes used by Citrest must be defined by specific .XSD. From .XSD, classes can be generated automatically through the eclipse plugin or by xjc.jar, available at initiative 0015 in SharePoint. To generate the classes from xjc, you must use the following command line: xjc \"{path and name of xsd}\" -d \"{absolute path to src} eg: D:\\Ambiente\\jboss\\server\\default\\deploy\\CitCorpore.war\\WEB-INF\\src}\" -p {pakage name} eg: {br.com.centralit.4biz.rest.schema} The .XSD should be in the br.com.centralit.4biz.rest.xsd package and thegenerated classes should be in the br.com.centralit.4biz.rest.schema package. In these packages there are already several .XSD and several classes used by Mobile that can be used as an example. Class CtError \u00b6 The CtError class is referenced by the other classes used to execute the Citrest operations. Classe CtLogin E CtLoginResp \u00b6 Every running operation on Citrest requires a SessionID returned by login. The login is implemented in class br.com.centralit.4biz.rest.resource.RestOperationResources and has as input an object of class CtLogin. As a result of the login, the SessionID or a CtError object is returned by login through the CtLoginResp class. Error Treatment \u00b6 The error handling of any execute method must obey the encapsulation pattern of the CtError object implemented in the RestOperationUtil class. Example CtNotificationGetReasonsResp resp = new CtNotificationGetReasonsResp(); CtNotificationGetReasons input = (CtNotificationGetReasons) message; if (input.getTaskId() == null ) { resp.setError(RestOperationUtil. buildError ( RestEnum. INPUT_ERROR , \"Id da tarefa n\u00e3o informado\")); return resp; } ... } catch (Exception e) { e.printStackTrace(); resp.setError(RestOperationUtil. buildError (e)); return resp; } Practical Example \u00b6 For ease of understanding, this section details the implementation and operation of the GetByUser service used in Mobile. It is responsible for returning the list of requisitions and incidents in a given user's work portfolio. The following steps were followed for its implementation: The XSD of the CtNotificationGetByUser and CtNotificationGetByUserResp classes were defined in the file br.com.centralit.4biz.rest.xsd.MobileNotification.XSD The classes were generated in the package br.com.centralit.4biz.rest.schema by xjc.jar The following entries have been added in the Web.xml file of the 4biz project: \\<context-param> \\<param-name>resteasy-resources3\\</param-name> \\<param-value> br.com.centralit.4biz.rest.resource.RestMobileResources \\</param-value> \\</context-param> \\<servlet-mapping> \\<servlet-name>resteasy-servlet\\</servlet-name> \\<url-pattern>/mobile/*\\</url-pattern> \\</servlet-mapping> These entries specify that a new resource class exists for RESTEasy and any URL containing /mobile/ will be intercepted by the web service servlet. \\@Path(\"/mobile\") public class RestMobileResources { \\@POST \\@Path(\"/notification/getByUser\") public Response getnotificationByUser(CtNotificationGetByUser input) { input.setMessageID(\"notification_getByUser\"); return RestOperationUtil. execute (input); } The web.xml configuration and implementation above determine that http://.../mobile/notification/getByUser calls will be intercepted by the RestMobileResources class. public CtMessageResp execute(RestSessionDTO restSessionDto, RestExecutionDTO restExecutionDto, RestOperationDTO restOperationDto, CtMessage message) throws AXBException Produto/Vers\u00e3o: 4biz | 8.00 Atualiza\u00e7\u00e3o: 13/12/2018 - Andre Luiz de Oliveira Fernandes","title":"Webservices Information"},{"location":"webservice/webservices.html#webservices-in-4biz","text":"Web Service is a solution used in systems integration and communication between different applications. With this technology it is possible that new applications can interact with those that already exist and that systems developed in different platforms are compatible. Web Services are components that allow applications to send and receive data in XML format. Each application can have its own \"language\", which is translated into a universal language, the XML format. This document describes the implementation of WebService in 4biz ESP. Called Citrest, the web service uses the RESTEasy implementation of the RESTFul standard. Through practical examples, the basic concepts, data structures, and patterns to be followed in the implementation of new services will be presented.","title":"Webservices in 4biz"},{"location":"webservice/webservices.html#the-standard-resteasy","text":"Representational State Transfer (REST) describes architectures that use the HTTP protocol or similar protocols, restricting the interface to a set of known HTTP operations: GET, POST, PUT, and DELETE. Citrest uses RESTEasy, which is an implementation of the JAX-RS specification that provides a Java API for RESTful Web Services through the HTTP protocol. This document is not intended to present details about the RESTful or RESTEasy implementation, since there is extensive documentation on the internet about the subject, such as in the site http://www.jboss.org/resteasy .","title":"The Standard RestEasy"},{"location":"webservice/webservices.html#data-model","text":"A structure has been created in the database to store data required for Citrest to function. The rest_v2.pdm data model is located in the**CitCorporeWeb/Model **directory. All tables maintained in Citrest have the prefix Rest_ and have relationships with other tables in the 4biz model: ObjetoNegocio, Grupo, Usu\u00e1rio, and ProcessamentoBatch.","title":"Data Model"},{"location":"webservice/webservices.html#classes-resources","text":"The Resources classes are simple classes, POJO, containing JAX-RS annotations to indicate existing mappings and operations. The Resources classes should be in the package br.com.centralit.4biz.rest.resource and follow the naming pattern used in the other classes Resources, Rest \\<NomeDoUC> Resources.java. The resource class that intercepts the http call to the webservice must be mapped to the web.xml file. For example: Example \\<context-param> \\<param-name>resteasy-resources2\\</param-name> \\<param-value> br.com.centralit.4biz.rest.resource.RestOperationResources \u200b\\</param-value> \\</context-param> A new instance of the Resource class is created for each request to that resource. Each resource method receives as a parameter a child instance of the CtMessage.java class and returns an object of type CtMessageResp. In this instance is attributed th value of the MessageID attribute. This instance is passed as a parameter to the execute method of the RestOperationUtil.java utility class.","title":"Classes Resources"},{"location":"webservice/webservices.html#utility-classes","text":"The RestOperationUtil.java class is responsible for performing the validations and targeting of the resource request for the class responsible for the Operation. The execute method (CtMessage input) is the method called by the Resources classes and receives as parameter an instance of CtMessage with the attribute MessageID assigned. The RestOperationUtil class obtains next to class RestUtil.java an instance of each Service and performs the following verifications: Verifies whether the SessionId exists and is not expired. Returns a RestSessionDTO object associated with the SessionId. Verifies whether the operation exists in the Rest_Operation table and returns the RestOperationDTO object. Verifies whether any associated user group with the session has permission on the Rest_Permission table. Once these validations are done, the class performs the Operation Initialization, recording in the Rest_Execution table the attributes. The RestExecution table functions as a Execution Log table. Note that the execution is created with the status NotInitiated, that is, the operation has not yet been initialized. This status will be updated later according to the result of the operation execution. After performing execution logging, the RestOperationUtil class instantiates the Operation class obtained from the JavaClass attribute of the Rest_Operation table and performs the call to the execute method. The execute method is a condition of the IRestOperation Interface contract. The classes that implement this interface need to implement the execute method. For each messageID a call is made to a specific method for treatment. Each of these methods can make calls to the 4biz Services Layer for reuse of services.","title":"Utility Classes"},{"location":"webservice/webservices.html#specific-rules","text":"All classes responsible for webservice operation must be registered in the Rest_Operation table. Each operation has an associated class that obeys a standard RestOperation interface and is responsible for its execution. The class executing the operation can be of type Java or JavaScript (ClassType attribute). Currently only the Java type is supported. An operation can be synchronous or asynchronous (OperationType attribute). A synchronous operation is performed immediately when it is called. An asynchronous operation points to batch processing. Currently, only synchronous operations are supported. For a given user to be able to perform an operation, at least one user group must be associated with the operation in the Rest_Permission table. The Rest_Parameter table stores parameters that can be used to perform operations. Examples of parameters are: idrestparameter Identifier Description 1 CONTRACT_ID Contract ID 2 ORIGIN_ID Source ID 3 REQUEST_ID Demand type ID for requests 4 INCIDENT_ID Incident demand type ID 5 DEFAULT_DEPTO_ID Unit Default ID Each operation can have one or more parameter domains in the Rest_Domain table. idrestparameter idrestoperation value 1 1 1 1 6 1 2 1 7 2 6 10 3 1 1 3 6 1 4 1 3 4 6 3 5 1 3 5 6 3 Each execution of a particular operation is recorded in the Rest_Execution table. This table records the date and time of the request, the id of the user requesting the execution, the input class, the input data, and the current execution status. Each result of an execution is recorded in the Rest_Log table. This table records the execution date and time, the output class, the output data, and the execution status. For the creation of a new resource the developer must follow the following parameterization steps: Record an operation in the Rest_Operation table and tell which Java class will execute it. Give operation execution permissions to one or more groups in the Rest_Permission table. Record parameters in the Rest_Parameter table. Associate the operation parameter domains in the Rest_Domain table.","title":"Specific Rules"},{"location":"webservice/webservices.html#class-structure","text":"All classes used by Citrest must be defined by specific .XSD. From .XSD, classes can be generated automatically through the eclipse plugin or by xjc.jar, available at initiative 0015 in SharePoint. To generate the classes from xjc, you must use the following command line: xjc \"{path and name of xsd}\" -d \"{absolute path to src} eg: D:\\Ambiente\\jboss\\server\\default\\deploy\\CitCorpore.war\\WEB-INF\\src}\" -p {pakage name} eg: {br.com.centralit.4biz.rest.schema} The .XSD should be in the br.com.centralit.4biz.rest.xsd package and thegenerated classes should be in the br.com.centralit.4biz.rest.schema package. In these packages there are already several .XSD and several classes used by Mobile that can be used as an example.","title":"Class Structure"},{"location":"webservice/webservices.html#class-cterror","text":"The CtError class is referenced by the other classes used to execute the Citrest operations.","title":"Class CtError"},{"location":"webservice/webservices.html#classe-ctlogin-e-ctloginresp","text":"Every running operation on Citrest requires a SessionID returned by login. The login is implemented in class br.com.centralit.4biz.rest.resource.RestOperationResources and has as input an object of class CtLogin. As a result of the login, the SessionID or a CtError object is returned by login through the CtLoginResp class.","title":"Classe CtLogin E CtLoginResp"},{"location":"webservice/webservices.html#error-treatment","text":"The error handling of any execute method must obey the encapsulation pattern of the CtError object implemented in the RestOperationUtil class. Example CtNotificationGetReasonsResp resp = new CtNotificationGetReasonsResp(); CtNotificationGetReasons input = (CtNotificationGetReasons) message; if (input.getTaskId() == null ) { resp.setError(RestOperationUtil. buildError ( RestEnum. INPUT_ERROR , \"Id da tarefa n\u00e3o informado\")); return resp; } ... } catch (Exception e) { e.printStackTrace(); resp.setError(RestOperationUtil. buildError (e)); return resp; }","title":"Error Treatment"},{"location":"webservice/webservices.html#practical-example","text":"For ease of understanding, this section details the implementation and operation of the GetByUser service used in Mobile. It is responsible for returning the list of requisitions and incidents in a given user's work portfolio. The following steps were followed for its implementation: The XSD of the CtNotificationGetByUser and CtNotificationGetByUserResp classes were defined in the file br.com.centralit.4biz.rest.xsd.MobileNotification.XSD The classes were generated in the package br.com.centralit.4biz.rest.schema by xjc.jar The following entries have been added in the Web.xml file of the 4biz project: \\<context-param> \\<param-name>resteasy-resources3\\</param-name> \\<param-value> br.com.centralit.4biz.rest.resource.RestMobileResources \\</param-value> \\</context-param> \\<servlet-mapping> \\<servlet-name>resteasy-servlet\\</servlet-name> \\<url-pattern>/mobile/*\\</url-pattern> \\</servlet-mapping> These entries specify that a new resource class exists for RESTEasy and any URL containing /mobile/ will be intercepted by the web service servlet. \\@Path(\"/mobile\") public class RestMobileResources { \\@POST \\@Path(\"/notification/getByUser\") public Response getnotificationByUser(CtNotificationGetByUser input) { input.setMessageID(\"notification_getByUser\"); return RestOperationUtil. execute (input); } The web.xml configuration and implementation above determine that http://.../mobile/notification/getByUser calls will be intercepted by the RestMobileResources class. public CtMessageResp execute(RestSessionDTO restSessionDto, RestExecutionDTO restExecutionDto, RestOperationDTO restOperationDto, CtMessage message) throws AXBException Produto/Vers\u00e3o: 4biz | 8.00 Atualiza\u00e7\u00e3o: 13/12/2018 - Andre Luiz de Oliveira Fernandes","title":"Practical Example"}]}